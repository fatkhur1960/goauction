# This file is a template, and might need editing before it works on your project.
image: golang:latest
# services:
#   - golang:latest


variables:
  # Please edit to your GitLab project
  REPO_NAME: github.com/fatkhur1960/goauction
  DB_HOST: ruby.db.elephantsql.com
  DB_USER: yptqnrts
  DB_PORT: 5432
  DB_NAME: ${CI_PROJECT_NAME}_db
  DB_NAME_TEST: yptqnrts
  DB_PASSWORD: FB_An4UeWqsqurQsbfFtmxXexqSKLLVD
  SSL_MODE: disable
  TEST_LOG: debug

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - cat dbconfig.yml.example > dbconfig.yml

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - go get -v github.com/rubenv/sql-migrate/...
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - sql-migrate down -env="test"
    - sql-migrate up -env="test"
    - go test -v $(go list ./... | grep -v /vendor/) -p=1

build:
  stage: build
  script:
    - mkdir $CI_PROJECT_DIR/out
    - go build -o $CI_PROJECT_DIR/out/$CI_PROJECT_NAME
  artifacts:
    paths:
      - $CI_PROJECT_DIR/out
