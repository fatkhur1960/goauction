// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ChatHistoryQuerySet

// ChatHistoryQuerySet is an queryset type for ChatHistory
type ChatHistoryQuerySet struct {
	db *gorm.DB
}

// NewChatHistoryQuerySet constructs new ChatHistoryQuerySet
func NewChatHistoryQuerySet(db *gorm.DB) ChatHistoryQuerySet {
	return ChatHistoryQuerySet{
		db: db.Model(&ChatHistory{}),
	}
}

func (qs ChatHistoryQuerySet) w(db *gorm.DB) ChatHistoryQuerySet {
	return NewChatHistoryQuerySet(db)
}

func (qs ChatHistoryQuerySet) Select(fields ...ChatHistoryDBSchemaField) ChatHistoryQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *ChatHistory) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ChatHistory) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) All(ret *[]ChatHistory) error {
	return qs.db.Find(ret).Error
}

// ChatIDEq is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDEq(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id = ?", chatID))
}

// ChatIDGt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDGt(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id > ?", chatID))
}

// ChatIDGte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDGte(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id >= ?", chatID))
}

// ChatIDIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDIn(chatID ...int64) ChatHistoryQuerySet {
	if len(chatID) == 0 {
		qs.db.AddError(errors.New("must at least pass one chatID in ChatIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("chat_id IN (?)", chatID))
}

// ChatIDLt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDLt(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id < ?", chatID))
}

// ChatIDLte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDLte(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id <= ?", chatID))
}

// ChatIDNe is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDNe(chatID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("chat_id != ?", chatID))
}

// ChatIDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) ChatIDNotIn(chatID ...int64) ChatHistoryQuerySet {
	if len(chatID) == 0 {
		qs.db.AddError(errors.New("must at least pass one chatID in ChatIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("chat_id NOT IN (?)", chatID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) Delete() error {
	return qs.db.Delete(ChatHistory{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ChatHistory{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ChatHistory{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) GetUpdater() ChatHistoryUpdater {
	return NewChatHistoryUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDEq(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDGt(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDGte(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDIn(ID ...int64) ChatHistoryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDLt(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDLte(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDNe(ID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) IDNotIn(ID ...int64) ChatHistoryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) Limit(limit int) ChatHistoryQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MessageIDEq is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDEq(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id = ?", messageID))
}

// MessageIDGt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDGt(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id > ?", messageID))
}

// MessageIDGte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDGte(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id >= ?", messageID))
}

// MessageIDIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDIn(messageID ...int64) ChatHistoryQuerySet {
	if len(messageID) == 0 {
		qs.db.AddError(errors.New("must at least pass one messageID in MessageIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("message_id IN (?)", messageID))
}

// MessageIDLt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDLt(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id < ?", messageID))
}

// MessageIDLte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDLte(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id <= ?", messageID))
}

// MessageIDNe is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDNe(messageID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("message_id != ?", messageID))
}

// MessageIDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) MessageIDNotIn(messageID ...int64) ChatHistoryQuerySet {
	if len(messageID) == 0 {
		qs.db.AddError(errors.New("must at least pass one messageID in MessageIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("message_id NOT IN (?)", messageID))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) Offset(offset int) ChatHistoryQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ChatHistoryQuerySet) One(ret *ChatHistory) error {
	return qs.db.First(ret).Error
}

// OrderAscByChatID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderAscByChatID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("chat_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderAscByID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByMessageID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderAscByMessageID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("message_id ASC"))
}

// OrderAscByOwnerID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderAscByOwnerID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("owner_id ASC"))
}

// OrderDescByChatID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderDescByChatID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("chat_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderDescByID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByMessageID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderDescByMessageID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("message_id DESC"))
}

// OrderDescByOwnerID is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OrderDescByOwnerID() ChatHistoryQuerySet {
	return qs.w(qs.db.Order("owner_id DESC"))
}

// OwnerIDEq is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDEq(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id = ?", ownerID))
}

// OwnerIDGt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDGt(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id > ?", ownerID))
}

// OwnerIDGte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDGte(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id >= ?", ownerID))
}

// OwnerIDIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDIn(ownerID ...int64) ChatHistoryQuerySet {
	if len(ownerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ownerID in OwnerIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("owner_id IN (?)", ownerID))
}

// OwnerIDLt is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDLt(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id < ?", ownerID))
}

// OwnerIDLte is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDLte(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id <= ?", ownerID))
}

// OwnerIDNe is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDNe(ownerID int64) ChatHistoryQuerySet {
	return qs.w(qs.db.Where("owner_id != ?", ownerID))
}

// OwnerIDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatHistoryQuerySet) OwnerIDNotIn(ownerID ...int64) ChatHistoryQuerySet {
	if len(ownerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ownerID in OwnerIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("owner_id NOT IN (?)", ownerID))
}

// SetChatID is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) SetChatID(chatID int64) ChatHistoryUpdater {
	u.fields[string(ChatHistoryDBSchema.ChatID)] = chatID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) SetID(ID int64) ChatHistoryUpdater {
	u.fields[string(ChatHistoryDBSchema.ID)] = ID
	return u
}

// SetMessageID is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) SetMessageID(messageID int64) ChatHistoryUpdater {
	u.fields[string(ChatHistoryDBSchema.MessageID)] = messageID
	return u
}

// SetOwnerID is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) SetOwnerID(ownerID int64) ChatHistoryUpdater {
	u.fields[string(ChatHistoryDBSchema.OwnerID)] = ownerID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ChatHistoryUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ChatHistoryQuerySet

// ===== BEGIN of ChatHistory modifiers

// ChatHistoryDBSchemaField describes database schema field. It requires for method 'Update'
type ChatHistoryDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ChatHistoryDBSchemaField) String() string {
	return string(f)
}

// ChatHistoryDBSchema stores db field names of ChatHistory
var ChatHistoryDBSchema = struct {
	ID        ChatHistoryDBSchemaField
	ChatID    ChatHistoryDBSchemaField
	OwnerID   ChatHistoryDBSchemaField
	MessageID ChatHistoryDBSchemaField
}{

	ID:        ChatHistoryDBSchemaField("id"),
	ChatID:    ChatHistoryDBSchemaField("chat_id"),
	OwnerID:   ChatHistoryDBSchemaField("owner_id"),
	MessageID: ChatHistoryDBSchemaField("message_id"),
}

// Update updates ChatHistory fields by primary key
// nolint: dupl
func (o *ChatHistory) Update(db *gorm.DB, fields ...ChatHistoryDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"chat_id":    o.ChatID,
		"owner_id":   o.OwnerID,
		"message_id": o.MessageID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ChatHistory %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ChatHistoryUpdater is an ChatHistory updates manager
type ChatHistoryUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewChatHistoryUpdater creates new ChatHistory updater
// nolint: dupl
func NewChatHistoryUpdater(db *gorm.DB) ChatHistoryUpdater {
	return ChatHistoryUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ChatHistory{}),
	}
}

// ===== END of ChatHistory modifiers

// ===== BEGIN of query set ChatQuerySet

// ChatQuerySet is an queryset type for Chat
type ChatQuerySet struct {
	db *gorm.DB
}

// NewChatQuerySet constructs new ChatQuerySet
func NewChatQuerySet(db *gorm.DB) ChatQuerySet {
	return ChatQuerySet{
		db: db.Model(&Chat{}),
	}
}

func (qs ChatQuerySet) w(db *gorm.DB) ChatQuerySet {
	return NewChatQuerySet(db)
}

func (qs ChatQuerySet) Select(fields ...ChatDBSchemaField) ChatQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Chat) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Chat) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) All(ret *[]Chat) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) Delete() error {
	return qs.db.Delete(Chat{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Chat{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Chat{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) GetUpdater() ChatUpdater {
	return NewChatUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDEq(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDGt(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDGte(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDIn(ID ...int64) ChatQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDLt(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDLte(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDNe(ID int64) ChatQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) IDNotIn(ID ...int64) ChatQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// InitiatorIDEq is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDEq(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id = ?", initiatorID))
}

// InitiatorIDGt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDGt(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id > ?", initiatorID))
}

// InitiatorIDGte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDGte(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id >= ?", initiatorID))
}

// InitiatorIDIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDIn(initiatorID ...int64) ChatQuerySet {
	if len(initiatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one initiatorID in InitiatorIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("initiator_id IN (?)", initiatorID))
}

// InitiatorIDLt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDLt(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id < ?", initiatorID))
}

// InitiatorIDLte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDLte(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id <= ?", initiatorID))
}

// InitiatorIDNe is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDNe(initiatorID int64) ChatQuerySet {
	return qs.w(qs.db.Where("initiator_id != ?", initiatorID))
}

// InitiatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) InitiatorIDNotIn(initiatorID ...int64) ChatQuerySet {
	if len(initiatorID) == 0 {
		qs.db.AddError(errors.New("must at least pass one initiatorID in InitiatorIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("initiator_id NOT IN (?)", initiatorID))
}

// LastUpdatedEq is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedEq(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated = ?", lastUpdated))
}

// LastUpdatedGt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedGt(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated > ?", lastUpdated))
}

// LastUpdatedGte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedGte(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated >= ?", lastUpdated))
}

// LastUpdatedIsNotNull is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedIsNotNull() ChatQuerySet {
	return qs.w(qs.db.Where("last_updated IS NOT NULL"))
}

// LastUpdatedIsNull is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedIsNull() ChatQuerySet {
	return qs.w(qs.db.Where("last_updated IS NULL"))
}

// LastUpdatedLt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedLt(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated < ?", lastUpdated))
}

// LastUpdatedLte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedLte(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated <= ?", lastUpdated))
}

// LastUpdatedNe is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) LastUpdatedNe(lastUpdated time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("last_updated != ?", lastUpdated))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) Limit(limit int) ChatQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) Offset(offset int) ChatQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ChatQuerySet) One(ret *Chat) error {
	return qs.db.First(ret).Error
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderAscByID() ChatQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByInitiatorID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderAscByInitiatorID() ChatQuerySet {
	return qs.w(qs.db.Order("initiator_id ASC"))
}

// OrderAscByLastUpdated is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderAscByLastUpdated() ChatQuerySet {
	return qs.w(qs.db.Order("last_updated ASC"))
}

// OrderAscBySubscriberID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderAscBySubscriberID() ChatQuerySet {
	return qs.w(qs.db.Order("subscriber_id ASC"))
}

// OrderAscByTS is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderAscByTS() ChatQuerySet {
	return qs.w(qs.db.Order("ts ASC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderDescByID() ChatQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByInitiatorID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderDescByInitiatorID() ChatQuerySet {
	return qs.w(qs.db.Order("initiator_id DESC"))
}

// OrderDescByLastUpdated is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderDescByLastUpdated() ChatQuerySet {
	return qs.w(qs.db.Order("last_updated DESC"))
}

// OrderDescBySubscriberID is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderDescBySubscriberID() ChatQuerySet {
	return qs.w(qs.db.Order("subscriber_id DESC"))
}

// OrderDescByTS is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) OrderDescByTS() ChatQuerySet {
	return qs.w(qs.db.Order("ts DESC"))
}

// SubscriberIDEq is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDEq(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id = ?", subscriberID))
}

// SubscriberIDGt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDGt(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id > ?", subscriberID))
}

// SubscriberIDGte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDGte(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id >= ?", subscriberID))
}

// SubscriberIDIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDIn(subscriberID ...int64) ChatQuerySet {
	if len(subscriberID) == 0 {
		qs.db.AddError(errors.New("must at least pass one subscriberID in SubscriberIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("subscriber_id IN (?)", subscriberID))
}

// SubscriberIDLt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDLt(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id < ?", subscriberID))
}

// SubscriberIDLte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDLte(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id <= ?", subscriberID))
}

// SubscriberIDNe is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDNe(subscriberID int64) ChatQuerySet {
	return qs.w(qs.db.Where("subscriber_id != ?", subscriberID))
}

// SubscriberIDNotIn is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) SubscriberIDNotIn(subscriberID ...int64) ChatQuerySet {
	if len(subscriberID) == 0 {
		qs.db.AddError(errors.New("must at least pass one subscriberID in SubscriberIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("subscriber_id NOT IN (?)", subscriberID))
}

// TSEq is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSEq(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts = ?", tS))
}

// TSGt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSGt(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts > ?", tS))
}

// TSGte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSGte(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts >= ?", tS))
}

// TSIsNotNull is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSIsNotNull() ChatQuerySet {
	return qs.w(qs.db.Where("ts IS NOT NULL"))
}

// TSIsNull is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSIsNull() ChatQuerySet {
	return qs.w(qs.db.Where("ts IS NULL"))
}

// TSLt is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSLt(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts < ?", tS))
}

// TSLte is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSLte(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts <= ?", tS))
}

// TSNe is an autogenerated method
// nolint: dupl
func (qs ChatQuerySet) TSNe(tS time.Time) ChatQuerySet {
	return qs.w(qs.db.Where("ts != ?", tS))
}

// SetID is an autogenerated method
// nolint: dupl
func (u ChatUpdater) SetID(ID int64) ChatUpdater {
	u.fields[string(ChatDBSchema.ID)] = ID
	return u
}

// SetInitiatorID is an autogenerated method
// nolint: dupl
func (u ChatUpdater) SetInitiatorID(initiatorID int64) ChatUpdater {
	u.fields[string(ChatDBSchema.InitiatorID)] = initiatorID
	return u
}

// SetLastUpdated is an autogenerated method
// nolint: dupl
func (u ChatUpdater) SetLastUpdated(lastUpdated *time.Time) ChatUpdater {
	u.fields[string(ChatDBSchema.LastUpdated)] = lastUpdated
	return u
}

// SetSubscriberID is an autogenerated method
// nolint: dupl
func (u ChatUpdater) SetSubscriberID(subscriberID int64) ChatUpdater {
	u.fields[string(ChatDBSchema.SubscriberID)] = subscriberID
	return u
}

// SetTS is an autogenerated method
// nolint: dupl
func (u ChatUpdater) SetTS(tS *time.Time) ChatUpdater {
	u.fields[string(ChatDBSchema.TS)] = tS
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ChatUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ChatUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ChatQuerySet

// ===== BEGIN of Chat modifiers

// ChatDBSchemaField describes database schema field. It requires for method 'Update'
type ChatDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ChatDBSchemaField) String() string {
	return string(f)
}

// ChatDBSchema stores db field names of Chat
var ChatDBSchema = struct {
	ID           ChatDBSchemaField
	InitiatorID  ChatDBSchemaField
	SubscriberID ChatDBSchemaField
	LastUpdated  ChatDBSchemaField
	TS           ChatDBSchemaField
}{

	ID:           ChatDBSchemaField("id"),
	InitiatorID:  ChatDBSchemaField("initiator_id"),
	SubscriberID: ChatDBSchemaField("subscriber_id"),
	LastUpdated:  ChatDBSchemaField("last_updated"),
	TS:           ChatDBSchemaField("ts"),
}

// Update updates Chat fields by primary key
// nolint: dupl
func (o *Chat) Update(db *gorm.DB, fields ...ChatDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":            o.ID,
		"initiator_id":  o.InitiatorID,
		"subscriber_id": o.SubscriberID,
		"last_updated":  o.LastUpdated,
		"ts":            o.TS,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Chat %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ChatUpdater is an Chat updates manager
type ChatUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewChatUpdater creates new Chat updater
// nolint: dupl
func NewChatUpdater(db *gorm.DB) ChatUpdater {
	return ChatUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Chat{}),
	}
}

// ===== END of Chat modifiers

// ===== BEGIN of query set MessageQuerySet

// MessageQuerySet is an queryset type for Message
type MessageQuerySet struct {
	db *gorm.DB
}

// NewMessageQuerySet constructs new MessageQuerySet
func NewMessageQuerySet(db *gorm.DB) MessageQuerySet {
	return MessageQuerySet{
		db: db.Model(&Message{}),
	}
}

func (qs MessageQuerySet) w(db *gorm.DB) MessageQuerySet {
	return NewMessageQuerySet(db)
}

func (qs MessageQuerySet) Select(fields ...MessageDBSchemaField) MessageQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Message) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Message) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) All(ret *[]Message) error {
	return qs.db.Find(ret).Error
}

// AttachmentDataEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataEq(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data = ?", attachmentData))
}

// AttachmentDataGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataGt(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data > ?", attachmentData))
}

// AttachmentDataGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataGte(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data >= ?", attachmentData))
}

// AttachmentDataIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataIn(attachmentData ...string) MessageQuerySet {
	if len(attachmentData) == 0 {
		qs.db.AddError(errors.New("must at least pass one attachmentData in AttachmentDataIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("attachment_data IN (?)", attachmentData))
}

// AttachmentDataLike is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataLike(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data LIKE ?", attachmentData))
}

// AttachmentDataLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataLt(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data < ?", attachmentData))
}

// AttachmentDataLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataLte(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data <= ?", attachmentData))
}

// AttachmentDataNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataNe(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data != ?", attachmentData))
}

// AttachmentDataNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataNotIn(attachmentData ...string) MessageQuerySet {
	if len(attachmentData) == 0 {
		qs.db.AddError(errors.New("must at least pass one attachmentData in AttachmentDataNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("attachment_data NOT IN (?)", attachmentData))
}

// AttachmentDataNotlike is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentDataNotlike(attachmentData string) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_data NOT LIKE ?", attachmentData))
}

// AttachmentKindEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindEq(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind = ?", attachmentKind))
}

// AttachmentKindGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindGt(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind > ?", attachmentKind))
}

// AttachmentKindGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindGte(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind >= ?", attachmentKind))
}

// AttachmentKindIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindIn(attachmentKind ...int) MessageQuerySet {
	if len(attachmentKind) == 0 {
		qs.db.AddError(errors.New("must at least pass one attachmentKind in AttachmentKindIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("attachment_kind IN (?)", attachmentKind))
}

// AttachmentKindLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindLt(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind < ?", attachmentKind))
}

// AttachmentKindLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindLte(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind <= ?", attachmentKind))
}

// AttachmentKindNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindNe(attachmentKind int) MessageQuerySet {
	return qs.w(qs.db.Where("attachment_kind != ?", attachmentKind))
}

// AttachmentKindNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) AttachmentKindNotIn(attachmentKind ...int) MessageQuerySet {
	if len(attachmentKind) == 0 {
		qs.db.AddError(errors.New("must at least pass one attachmentKind in AttachmentKindNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("attachment_kind NOT IN (?)", attachmentKind))
}

// ChatIDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDEq(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id = ?", chatID))
}

// ChatIDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDGt(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id > ?", chatID))
}

// ChatIDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDGte(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id >= ?", chatID))
}

// ChatIDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDIn(chatID ...int64) MessageQuerySet {
	if len(chatID) == 0 {
		qs.db.AddError(errors.New("must at least pass one chatID in ChatIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("chat_id IN (?)", chatID))
}

// ChatIDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDLt(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id < ?", chatID))
}

// ChatIDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDLte(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id <= ?", chatID))
}

// ChatIDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDNe(chatID int64) MessageQuerySet {
	return qs.w(qs.db.Where("chat_id != ?", chatID))
}

// ChatIDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ChatIDNotIn(chatID ...int64) MessageQuerySet {
	if len(chatID) == 0 {
		qs.db.AddError(errors.New("must at least pass one chatID in ChatIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("chat_id NOT IN (?)", chatID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Delete() error {
	return qs.db.Delete(Message{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Message{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Message{})
	return db.RowsAffected, db.Error
}

// DeletedEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedEq(deleted bool) MessageQuerySet {
	return qs.w(qs.db.Where("deleted = ?", deleted))
}

// DeletedIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedIn(deleted ...bool) MessageQuerySet {
	if len(deleted) == 0 {
		qs.db.AddError(errors.New("must at least pass one deleted in DeletedIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deleted IN (?)", deleted))
}

// DeletedNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedNe(deleted bool) MessageQuerySet {
	return qs.w(qs.db.Where("deleted != ?", deleted))
}

// DeletedNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedNotIn(deleted ...bool) MessageQuerySet {
	if len(deleted) == 0 {
		qs.db.AddError(errors.New("must at least pass one deleted in DeletedNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deleted NOT IN (?)", deleted))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) GetUpdater() MessageUpdater {
	return NewMessageUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDEq(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDGt(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDGte(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDIn(ID ...int64) MessageQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDLt(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDLte(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDNe(ID int64) MessageQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDNotIn(ID ...int64) MessageQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Limit(limit int) MessageQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Offset(offset int) MessageQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs MessageQuerySet) One(ret *Message) error {
	return qs.db.First(ret).Error
}

// OrderAscByAttachmentData is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByAttachmentData() MessageQuerySet {
	return qs.w(qs.db.Order("attachment_data ASC"))
}

// OrderAscByAttachmentKind is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByAttachmentKind() MessageQuerySet {
	return qs.w(qs.db.Order("attachment_kind ASC"))
}

// OrderAscByChatID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByChatID() MessageQuerySet {
	return qs.w(qs.db.Order("chat_id ASC"))
}

// OrderAscByDeleted is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByDeleted() MessageQuerySet {
	return qs.w(qs.db.Order("deleted ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByID() MessageQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByReceiverID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByReceiverID() MessageQuerySet {
	return qs.w(qs.db.Order("receiver_id ASC"))
}

// OrderAscBySenderID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscBySenderID() MessageQuerySet {
	return qs.w(qs.db.Order("sender_id ASC"))
}

// OrderAscByTS is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByTS() MessageQuerySet {
	return qs.w(qs.db.Order("ts ASC"))
}

// OrderAscByText is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByText() MessageQuerySet {
	return qs.w(qs.db.Order("text ASC"))
}

// OrderDescByAttachmentData is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByAttachmentData() MessageQuerySet {
	return qs.w(qs.db.Order("attachment_data DESC"))
}

// OrderDescByAttachmentKind is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByAttachmentKind() MessageQuerySet {
	return qs.w(qs.db.Order("attachment_kind DESC"))
}

// OrderDescByChatID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByChatID() MessageQuerySet {
	return qs.w(qs.db.Order("chat_id DESC"))
}

// OrderDescByDeleted is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByDeleted() MessageQuerySet {
	return qs.w(qs.db.Order("deleted DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByID() MessageQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByReceiverID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByReceiverID() MessageQuerySet {
	return qs.w(qs.db.Order("receiver_id DESC"))
}

// OrderDescBySenderID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescBySenderID() MessageQuerySet {
	return qs.w(qs.db.Order("sender_id DESC"))
}

// OrderDescByTS is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByTS() MessageQuerySet {
	return qs.w(qs.db.Order("ts DESC"))
}

// OrderDescByText is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByText() MessageQuerySet {
	return qs.w(qs.db.Order("text DESC"))
}

// ReceiverIDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDEq(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id = ?", receiverID))
}

// ReceiverIDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDGt(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id > ?", receiverID))
}

// ReceiverIDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDGte(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id >= ?", receiverID))
}

// ReceiverIDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDIn(receiverID ...int64) MessageQuerySet {
	if len(receiverID) == 0 {
		qs.db.AddError(errors.New("must at least pass one receiverID in ReceiverIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("receiver_id IN (?)", receiverID))
}

// ReceiverIDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDLt(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id < ?", receiverID))
}

// ReceiverIDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDLte(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id <= ?", receiverID))
}

// ReceiverIDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDNe(receiverID int64) MessageQuerySet {
	return qs.w(qs.db.Where("receiver_id != ?", receiverID))
}

// ReceiverIDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) ReceiverIDNotIn(receiverID ...int64) MessageQuerySet {
	if len(receiverID) == 0 {
		qs.db.AddError(errors.New("must at least pass one receiverID in ReceiverIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("receiver_id NOT IN (?)", receiverID))
}

// SenderIDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDEq(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id = ?", senderID))
}

// SenderIDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDGt(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id > ?", senderID))
}

// SenderIDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDGte(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id >= ?", senderID))
}

// SenderIDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDIn(senderID ...int64) MessageQuerySet {
	if len(senderID) == 0 {
		qs.db.AddError(errors.New("must at least pass one senderID in SenderIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sender_id IN (?)", senderID))
}

// SenderIDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDLt(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id < ?", senderID))
}

// SenderIDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDLte(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id <= ?", senderID))
}

// SenderIDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDNe(senderID int64) MessageQuerySet {
	return qs.w(qs.db.Where("sender_id != ?", senderID))
}

// SenderIDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) SenderIDNotIn(senderID ...int64) MessageQuerySet {
	if len(senderID) == 0 {
		qs.db.AddError(errors.New("must at least pass one senderID in SenderIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sender_id NOT IN (?)", senderID))
}

// TSEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSEq(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts = ?", tS))
}

// TSGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSGt(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts > ?", tS))
}

// TSGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSGte(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts >= ?", tS))
}

// TSIsNotNull is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSIsNotNull() MessageQuerySet {
	return qs.w(qs.db.Where("ts IS NOT NULL"))
}

// TSIsNull is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSIsNull() MessageQuerySet {
	return qs.w(qs.db.Where("ts IS NULL"))
}

// TSLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSLt(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts < ?", tS))
}

// TSLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSLte(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts <= ?", tS))
}

// TSNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TSNe(tS time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("ts != ?", tS))
}

// TextEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextEq(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text = ?", text))
}

// TextGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextGt(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text > ?", text))
}

// TextGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextGte(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text >= ?", text))
}

// TextIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextIn(text ...string) MessageQuerySet {
	if len(text) == 0 {
		qs.db.AddError(errors.New("must at least pass one text in TextIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("text IN (?)", text))
}

// TextLike is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextLike(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text LIKE ?", text))
}

// TextLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextLt(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text < ?", text))
}

// TextLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextLte(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text <= ?", text))
}

// TextNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextNe(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text != ?", text))
}

// TextNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextNotIn(text ...string) MessageQuerySet {
	if len(text) == 0 {
		qs.db.AddError(errors.New("must at least pass one text in TextNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("text NOT IN (?)", text))
}

// TextNotlike is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TextNotlike(text string) MessageQuerySet {
	return qs.w(qs.db.Where("text NOT LIKE ?", text))
}

// SetAttachmentData is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetAttachmentData(attachmentData string) MessageUpdater {
	u.fields[string(MessageDBSchema.AttachmentData)] = attachmentData
	return u
}

// SetAttachmentKind is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetAttachmentKind(attachmentKind int) MessageUpdater {
	u.fields[string(MessageDBSchema.AttachmentKind)] = attachmentKind
	return u
}

// SetChatID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetChatID(chatID int64) MessageUpdater {
	u.fields[string(MessageDBSchema.ChatID)] = chatID
	return u
}

// SetDeleted is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetDeleted(deleted bool) MessageUpdater {
	u.fields[string(MessageDBSchema.Deleted)] = deleted
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetID(ID int64) MessageUpdater {
	u.fields[string(MessageDBSchema.ID)] = ID
	return u
}

// SetReceiverID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetReceiverID(receiverID int64) MessageUpdater {
	u.fields[string(MessageDBSchema.ReceiverID)] = receiverID
	return u
}

// SetSenderID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetSenderID(senderID int64) MessageUpdater {
	u.fields[string(MessageDBSchema.SenderID)] = senderID
	return u
}

// SetTS is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetTS(tS *time.Time) MessageUpdater {
	u.fields[string(MessageDBSchema.TS)] = tS
	return u
}

// SetText is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetText(text string) MessageUpdater {
	u.fields[string(MessageDBSchema.Text)] = text
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u MessageUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u MessageUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set MessageQuerySet

// ===== BEGIN of Message modifiers

// MessageDBSchemaField describes database schema field. It requires for method 'Update'
type MessageDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f MessageDBSchemaField) String() string {
	return string(f)
}

// MessageDBSchema stores db field names of Message
var MessageDBSchema = struct {
	ID             MessageDBSchemaField
	ChatID         MessageDBSchemaField
	SenderID       MessageDBSchemaField
	ReceiverID     MessageDBSchemaField
	Text           MessageDBSchemaField
	Deleted        MessageDBSchemaField
	AttachmentKind MessageDBSchemaField
	AttachmentData MessageDBSchemaField
	TS             MessageDBSchemaField
}{

	ID:             MessageDBSchemaField("id"),
	ChatID:         MessageDBSchemaField("chat_id"),
	SenderID:       MessageDBSchemaField("sender_id"),
	ReceiverID:     MessageDBSchemaField("receiver_id"),
	Text:           MessageDBSchemaField("text"),
	Deleted:        MessageDBSchemaField("deleted"),
	AttachmentKind: MessageDBSchemaField("attachment_kind"),
	AttachmentData: MessageDBSchemaField("attachment_data"),
	TS:             MessageDBSchemaField("ts"),
}

// Update updates Message fields by primary key
// nolint: dupl
func (o *Message) Update(db *gorm.DB, fields ...MessageDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":              o.ID,
		"chat_id":         o.ChatID,
		"sender_id":       o.SenderID,
		"receiver_id":     o.ReceiverID,
		"text":            o.Text,
		"deleted":         o.Deleted,
		"attachment_kind": o.AttachmentKind,
		"attachment_data": o.AttachmentData,
		"ts":              o.TS,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Message %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// MessageUpdater is an Message updates manager
type MessageUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewMessageUpdater creates new Message updater
// nolint: dupl
func NewMessageUpdater(db *gorm.DB) MessageUpdater {
	return MessageUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Message{}),
	}
}

// ===== END of Message modifiers

// ===== END of all query sets
