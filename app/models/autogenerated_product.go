// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ProductBidderQuerySet

// ProductBidderQuerySet is an queryset type for ProductBidder
type ProductBidderQuerySet struct {
	db *gorm.DB
}

// NewProductBidderQuerySet constructs new ProductBidderQuerySet
func NewProductBidderQuerySet(db *gorm.DB) ProductBidderQuerySet {
	return ProductBidderQuerySet{
		db: db.Model(&ProductBidder{}),
	}
}

func (qs ProductBidderQuerySet) w(db *gorm.DB) ProductBidderQuerySet {
	return NewProductBidderQuerySet(db)
}

func (qs ProductBidderQuerySet) Select(fields ...ProductBidderDBSchemaField) ProductBidderQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *ProductBidder) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ProductBidder) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) All(ret *[]ProductBidder) error {
	return qs.db.Find(ret).Error
}

// BidPriceEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceEq(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price = ?", bidPrice))
}

// BidPriceGt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceGt(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price > ?", bidPrice))
}

// BidPriceGte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceGte(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price >= ?", bidPrice))
}

// BidPriceIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceIn(bidPrice ...float64) ProductBidderQuerySet {
	if len(bidPrice) == 0 {
		qs.db.AddError(errors.New("must at least pass one bidPrice in BidPriceIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bid_price IN (?)", bidPrice))
}

// BidPriceLt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceLt(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price < ?", bidPrice))
}

// BidPriceLte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceLte(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price <= ?", bidPrice))
}

// BidPriceNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceNe(bidPrice float64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("bid_price != ?", bidPrice))
}

// BidPriceNotIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) BidPriceNotIn(bidPrice ...float64) ProductBidderQuerySet {
	if len(bidPrice) == 0 {
		qs.db.AddError(errors.New("must at least pass one bidPrice in BidPriceNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bid_price NOT IN (?)", bidPrice))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedATEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATEq(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAT))
}

// CreatedATGt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATGt(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAT))
}

// CreatedATGte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATGte(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAT))
}

// CreatedATIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATIsNotNull() ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at IS NOT NULL"))
}

// CreatedATIsNull is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATIsNull() ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at IS NULL"))
}

// CreatedATLt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATLt(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAT))
}

// CreatedATLte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATLte(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAT))
}

// CreatedATNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) CreatedATNe(createdAT time.Time) ProductBidderQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAT))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) Delete() error {
	return qs.db.Delete(ProductBidder{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ProductBidder{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ProductBidder{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) GetUpdater() ProductBidderUpdater {
	return NewProductBidderUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDEq(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDGt(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDGte(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDIn(ID ...int64) ProductBidderQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDLt(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDLte(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDNe(ID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) IDNotIn(ID ...int64) ProductBidderQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) Limit(limit int) ProductBidderQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) Offset(offset int) ProductBidderQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProductBidderQuerySet) One(ret *ProductBidder) error {
	return qs.db.First(ret).Error
}

// OrderAscByBidPrice is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByBidPrice() ProductBidderQuerySet {
	return qs.w(qs.db.Order("bid_price ASC"))
}

// OrderAscByCreatedAT is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByCreatedAT() ProductBidderQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByProductID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByProductID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("product_id ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByUserID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderAscByWinner is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderAscByWinner() ProductBidderQuerySet {
	return qs.w(qs.db.Order("winner ASC"))
}

// OrderDescByBidPrice is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByBidPrice() ProductBidderQuerySet {
	return qs.w(qs.db.Order("bid_price DESC"))
}

// OrderDescByCreatedAT is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByCreatedAT() ProductBidderQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByProductID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByProductID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("product_id DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByUserID() ProductBidderQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// OrderDescByWinner is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) OrderDescByWinner() ProductBidderQuerySet {
	return qs.w(qs.db.Order("winner DESC"))
}

// PreloadUser is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) PreloadUser() ProductBidderQuerySet {
	return qs.w(qs.db.Preload("User"))
}

// ProductIDEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDEq(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id = ?", productID))
}

// ProductIDGt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDGt(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id > ?", productID))
}

// ProductIDGte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDGte(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id >= ?", productID))
}

// ProductIDIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDIn(productID ...int64) ProductBidderQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id IN (?)", productID))
}

// ProductIDLt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDLt(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id < ?", productID))
}

// ProductIDLte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDLte(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id <= ?", productID))
}

// ProductIDNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDNe(productID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("product_id != ?", productID))
}

// ProductIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) ProductIDNotIn(productID ...int64) ProductBidderQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id NOT IN (?)", productID))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDEq(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDGt(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDGte(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDIn(userID ...int64) ProductBidderQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDLt(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDLte(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDNe(userID int64) ProductBidderQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIDNotIn(userID ...int64) ProductBidderQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// UserIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIsNotNull() ProductBidderQuerySet {
	return qs.w(qs.db.Where("user IS NOT NULL"))
}

// UserIsNull is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) UserIsNull() ProductBidderQuerySet {
	return qs.w(qs.db.Where("user IS NULL"))
}

// WinnerEq is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) WinnerEq(winner bool) ProductBidderQuerySet {
	return qs.w(qs.db.Where("winner = ?", winner))
}

// WinnerIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) WinnerIn(winner ...bool) ProductBidderQuerySet {
	if len(winner) == 0 {
		qs.db.AddError(errors.New("must at least pass one winner in WinnerIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("winner IN (?)", winner))
}

// WinnerNe is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) WinnerNe(winner bool) ProductBidderQuerySet {
	return qs.w(qs.db.Where("winner != ?", winner))
}

// WinnerNotIn is an autogenerated method
// nolint: dupl
func (qs ProductBidderQuerySet) WinnerNotIn(winner ...bool) ProductBidderQuerySet {
	if len(winner) == 0 {
		qs.db.AddError(errors.New("must at least pass one winner in WinnerNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("winner NOT IN (?)", winner))
}

// SetBidPrice is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetBidPrice(bidPrice float64) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.BidPrice)] = bidPrice
	return u
}

// SetCreatedAT is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetCreatedAT(createdAT *time.Time) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.CreatedAT)] = createdAT
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetID(ID int64) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.ID)] = ID
	return u
}

// SetProductID is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetProductID(productID int64) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.ProductID)] = productID
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetUserID(userID int64) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.UserID)] = userID
	return u
}

// SetWinner is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) SetWinner(winner bool) ProductBidderUpdater {
	u.fields[string(ProductBidderDBSchema.Winner)] = winner
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProductBidderUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ProductBidderQuerySet

// ===== BEGIN of ProductBidder modifiers

// ProductBidderDBSchemaField describes database schema field. It requires for method 'Update'
type ProductBidderDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProductBidderDBSchemaField) String() string {
	return string(f)
}

// ProductBidderDBSchema stores db field names of ProductBidder
var ProductBidderDBSchema = struct {
	ID        ProductBidderDBSchemaField
	UserID    ProductBidderDBSchemaField
	ProductID ProductBidderDBSchemaField
	BidPrice  ProductBidderDBSchemaField
	Winner    ProductBidderDBSchemaField
	CreatedAT ProductBidderDBSchemaField
	User      ProductBidderDBSchemaField
}{

	ID:        ProductBidderDBSchemaField("id"),
	UserID:    ProductBidderDBSchemaField("user_id"),
	ProductID: ProductBidderDBSchemaField("product_id"),
	BidPrice:  ProductBidderDBSchemaField("bid_price"),
	Winner:    ProductBidderDBSchemaField("winner"),
	CreatedAT: ProductBidderDBSchemaField("created_at"),
	User:      ProductBidderDBSchemaField("user"),
}

// Update updates ProductBidder fields by primary key
// nolint: dupl
func (o *ProductBidder) Update(db *gorm.DB, fields ...ProductBidderDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"user_id":    o.UserID,
		"product_id": o.ProductID,
		"bid_price":  o.BidPrice,
		"winner":     o.Winner,
		"created_at": o.CreatedAT,
		"user":       o.User,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ProductBidder %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProductBidderUpdater is an ProductBidder updates manager
type ProductBidderUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProductBidderUpdater creates new ProductBidder updater
// nolint: dupl
func NewProductBidderUpdater(db *gorm.DB) ProductBidderUpdater {
	return ProductBidderUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ProductBidder{}),
	}
}

// ===== END of ProductBidder modifiers

// ===== BEGIN of query set ProductImageQuerySet

// ProductImageQuerySet is an queryset type for ProductImage
type ProductImageQuerySet struct {
	db *gorm.DB
}

// NewProductImageQuerySet constructs new ProductImageQuerySet
func NewProductImageQuerySet(db *gorm.DB) ProductImageQuerySet {
	return ProductImageQuerySet{
		db: db.Model(&ProductImage{}),
	}
}

func (qs ProductImageQuerySet) w(db *gorm.DB) ProductImageQuerySet {
	return NewProductImageQuerySet(db)
}

func (qs ProductImageQuerySet) Select(fields ...ProductImageDBSchemaField) ProductImageQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *ProductImage) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ProductImage) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) All(ret *[]ProductImage) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) Delete() error {
	return qs.db.Delete(ProductImage{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ProductImage{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ProductImage{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) GetUpdater() ProductImageUpdater {
	return NewProductImageUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDEq(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDGt(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDGte(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDIn(ID ...int64) ProductImageQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDLt(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDLte(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDNe(ID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) IDNotIn(ID ...int64) ProductImageQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// ImageURLEq is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLEq(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url = ?", imageURL))
}

// ImageURLGt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLGt(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url > ?", imageURL))
}

// ImageURLGte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLGte(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url >= ?", imageURL))
}

// ImageURLIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLIn(imageURL ...string) ProductImageQuerySet {
	if len(imageURL) == 0 {
		qs.db.AddError(errors.New("must at least pass one imageURL in ImageURLIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("image_url IN (?)", imageURL))
}

// ImageURLLike is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLLike(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url LIKE ?", imageURL))
}

// ImageURLLt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLLt(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url < ?", imageURL))
}

// ImageURLLte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLLte(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url <= ?", imageURL))
}

// ImageURLNe is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLNe(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url != ?", imageURL))
}

// ImageURLNotIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLNotIn(imageURL ...string) ProductImageQuerySet {
	if len(imageURL) == 0 {
		qs.db.AddError(errors.New("must at least pass one imageURL in ImageURLNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("image_url NOT IN (?)", imageURL))
}

// ImageURLNotlike is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ImageURLNotlike(imageURL string) ProductImageQuerySet {
	return qs.w(qs.db.Where("image_url NOT LIKE ?", imageURL))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) Limit(limit int) ProductImageQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) Offset(offset int) ProductImageQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProductImageQuerySet) One(ret *ProductImage) error {
	return qs.db.First(ret).Error
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderAscByID() ProductImageQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByImageURL is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderAscByImageURL() ProductImageQuerySet {
	return qs.w(qs.db.Order("image_url ASC"))
}

// OrderAscByProductID is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderAscByProductID() ProductImageQuerySet {
	return qs.w(qs.db.Order("product_id ASC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderDescByID() ProductImageQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByImageURL is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderDescByImageURL() ProductImageQuerySet {
	return qs.w(qs.db.Order("image_url DESC"))
}

// OrderDescByProductID is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) OrderDescByProductID() ProductImageQuerySet {
	return qs.w(qs.db.Order("product_id DESC"))
}

// ProductIDEq is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDEq(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id = ?", productID))
}

// ProductIDGt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDGt(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id > ?", productID))
}

// ProductIDGte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDGte(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id >= ?", productID))
}

// ProductIDIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDIn(productID ...int64) ProductImageQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id IN (?)", productID))
}

// ProductIDLt is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDLt(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id < ?", productID))
}

// ProductIDLte is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDLte(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id <= ?", productID))
}

// ProductIDNe is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDNe(productID int64) ProductImageQuerySet {
	return qs.w(qs.db.Where("product_id != ?", productID))
}

// ProductIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductImageQuerySet) ProductIDNotIn(productID ...int64) ProductImageQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id NOT IN (?)", productID))
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProductImageUpdater) SetID(ID int64) ProductImageUpdater {
	u.fields[string(ProductImageDBSchema.ID)] = ID
	return u
}

// SetImageURL is an autogenerated method
// nolint: dupl
func (u ProductImageUpdater) SetImageURL(imageURL string) ProductImageUpdater {
	u.fields[string(ProductImageDBSchema.ImageURL)] = imageURL
	return u
}

// SetProductID is an autogenerated method
// nolint: dupl
func (u ProductImageUpdater) SetProductID(productID int64) ProductImageUpdater {
	u.fields[string(ProductImageDBSchema.ProductID)] = productID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProductImageUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProductImageUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ProductImageQuerySet

// ===== BEGIN of ProductImage modifiers

// ProductImageDBSchemaField describes database schema field. It requires for method 'Update'
type ProductImageDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProductImageDBSchemaField) String() string {
	return string(f)
}

// ProductImageDBSchema stores db field names of ProductImage
var ProductImageDBSchema = struct {
	ID        ProductImageDBSchemaField
	ProductID ProductImageDBSchemaField
	ImageURL  ProductImageDBSchemaField
}{

	ID:        ProductImageDBSchemaField("id"),
	ProductID: ProductImageDBSchemaField("product_id"),
	ImageURL:  ProductImageDBSchemaField("image_url"),
}

// Update updates ProductImage fields by primary key
// nolint: dupl
func (o *ProductImage) Update(db *gorm.DB, fields ...ProductImageDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"product_id": o.ProductID,
		"image_url":  o.ImageURL,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ProductImage %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProductImageUpdater is an ProductImage updates manager
type ProductImageUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProductImageUpdater creates new ProductImage updater
// nolint: dupl
func NewProductImageUpdater(db *gorm.DB) ProductImageUpdater {
	return ProductImageUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ProductImage{}),
	}
}

// ===== END of ProductImage modifiers

// ===== BEGIN of query set ProductLabelQuerySet

// ProductLabelQuerySet is an queryset type for ProductLabel
type ProductLabelQuerySet struct {
	db *gorm.DB
}

// NewProductLabelQuerySet constructs new ProductLabelQuerySet
func NewProductLabelQuerySet(db *gorm.DB) ProductLabelQuerySet {
	return ProductLabelQuerySet{
		db: db.Model(&ProductLabel{}),
	}
}

func (qs ProductLabelQuerySet) w(db *gorm.DB) ProductLabelQuerySet {
	return NewProductLabelQuerySet(db)
}

func (qs ProductLabelQuerySet) Select(fields ...ProductLabelDBSchemaField) ProductLabelQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *ProductLabel) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ProductLabel) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) All(ret *[]ProductLabel) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) Delete() error {
	return qs.db.Delete(ProductLabel{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ProductLabel{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ProductLabel{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) GetUpdater() ProductLabelUpdater {
	return NewProductLabelUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDEq(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDGt(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDGte(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDIn(ID ...int64) ProductLabelQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDLt(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDLte(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDNe(ID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) IDNotIn(ID ...int64) ProductLabelQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) Limit(limit int) ProductLabelQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameEq(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameGt(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameGte(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameIn(name ...string) ProductLabelQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameLike(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameLt(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameLte(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameNe(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameNotIn(name ...string) ProductLabelQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) NameNotlike(name string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) Offset(offset int) ProductLabelQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProductLabelQuerySet) One(ret *ProductLabel) error {
	return qs.db.First(ret).Error
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderAscByID() ProductLabelQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderAscByName() ProductLabelQuerySet {
	return qs.w(qs.db.Order("name ASC"))
}

// OrderAscByProductID is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderAscByProductID() ProductLabelQuerySet {
	return qs.w(qs.db.Order("product_id ASC"))
}

// OrderAscByValue is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderAscByValue() ProductLabelQuerySet {
	return qs.w(qs.db.Order("value ASC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderDescByID() ProductLabelQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderDescByName() ProductLabelQuerySet {
	return qs.w(qs.db.Order("name DESC"))
}

// OrderDescByProductID is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderDescByProductID() ProductLabelQuerySet {
	return qs.w(qs.db.Order("product_id DESC"))
}

// OrderDescByValue is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) OrderDescByValue() ProductLabelQuerySet {
	return qs.w(qs.db.Order("value DESC"))
}

// ProductIDEq is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDEq(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id = ?", productID))
}

// ProductIDGt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDGt(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id > ?", productID))
}

// ProductIDGte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDGte(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id >= ?", productID))
}

// ProductIDIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDIn(productID ...int64) ProductLabelQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id IN (?)", productID))
}

// ProductIDLt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDLt(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id < ?", productID))
}

// ProductIDLte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDLte(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id <= ?", productID))
}

// ProductIDNe is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDNe(productID int64) ProductLabelQuerySet {
	return qs.w(qs.db.Where("product_id != ?", productID))
}

// ProductIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ProductIDNotIn(productID ...int64) ProductLabelQuerySet {
	if len(productID) == 0 {
		qs.db.AddError(errors.New("must at least pass one productID in ProductIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_id NOT IN (?)", productID))
}

// ValueEq is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueEq(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value = ?", value))
}

// ValueGt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueGt(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value > ?", value))
}

// ValueGte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueGte(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value >= ?", value))
}

// ValueIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueIn(value ...string) ProductLabelQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value IN (?)", value))
}

// ValueLike is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueLike(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value LIKE ?", value))
}

// ValueLt is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueLt(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value < ?", value))
}

// ValueLte is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueLte(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value <= ?", value))
}

// ValueNe is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueNe(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value != ?", value))
}

// ValueNotIn is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueNotIn(value ...string) ProductLabelQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value NOT IN (?)", value))
}

// ValueNotlike is an autogenerated method
// nolint: dupl
func (qs ProductLabelQuerySet) ValueNotlike(value string) ProductLabelQuerySet {
	return qs.w(qs.db.Where("value NOT LIKE ?", value))
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) SetID(ID int64) ProductLabelUpdater {
	u.fields[string(ProductLabelDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) SetName(name string) ProductLabelUpdater {
	u.fields[string(ProductLabelDBSchema.Name)] = name
	return u
}

// SetProductID is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) SetProductID(productID int64) ProductLabelUpdater {
	u.fields[string(ProductLabelDBSchema.ProductID)] = productID
	return u
}

// SetValue is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) SetValue(value string) ProductLabelUpdater {
	u.fields[string(ProductLabelDBSchema.Value)] = value
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProductLabelUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ProductLabelQuerySet

// ===== BEGIN of ProductLabel modifiers

// ProductLabelDBSchemaField describes database schema field. It requires for method 'Update'
type ProductLabelDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProductLabelDBSchemaField) String() string {
	return string(f)
}

// ProductLabelDBSchema stores db field names of ProductLabel
var ProductLabelDBSchema = struct {
	ID        ProductLabelDBSchemaField
	ProductID ProductLabelDBSchemaField
	Name      ProductLabelDBSchemaField
	Value     ProductLabelDBSchemaField
}{

	ID:        ProductLabelDBSchemaField("id"),
	ProductID: ProductLabelDBSchemaField("product_id"),
	Name:      ProductLabelDBSchemaField("name"),
	Value:     ProductLabelDBSchemaField("value"),
}

// Update updates ProductLabel fields by primary key
// nolint: dupl
func (o *ProductLabel) Update(db *gorm.DB, fields ...ProductLabelDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"product_id": o.ProductID,
		"name":       o.Name,
		"value":      o.Value,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ProductLabel %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProductLabelUpdater is an ProductLabel updates manager
type ProductLabelUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProductLabelUpdater creates new ProductLabel updater
// nolint: dupl
func NewProductLabelUpdater(db *gorm.DB) ProductLabelUpdater {
	return ProductLabelUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ProductLabel{}),
	}
}

// ===== END of ProductLabel modifiers

// ===== BEGIN of query set ProductQuerySet

// ProductQuerySet is an queryset type for Product
type ProductQuerySet struct {
	db *gorm.DB
}

// NewProductQuerySet constructs new ProductQuerySet
func NewProductQuerySet(db *gorm.DB) ProductQuerySet {
	return ProductQuerySet{
		db: db.Model(&Product{}),
	}
}

func (qs ProductQuerySet) w(db *gorm.DB) ProductQuerySet {
	return NewProductQuerySet(db)
}

func (qs ProductQuerySet) Select(fields ...ProductDBSchemaField) ProductQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Product) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Product) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) All(ret *[]Product) error {
	return qs.db.Find(ret).Error
}

// BidMultplEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplEq(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl = ?", bidMultpl))
}

// BidMultplGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplGt(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl > ?", bidMultpl))
}

// BidMultplGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplGte(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl >= ?", bidMultpl))
}

// BidMultplIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplIn(bidMultpl ...float64) ProductQuerySet {
	if len(bidMultpl) == 0 {
		qs.db.AddError(errors.New("must at least pass one bidMultpl in BidMultplIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bid_multpl IN (?)", bidMultpl))
}

// BidMultplLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplLt(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl < ?", bidMultpl))
}

// BidMultplLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplLte(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl <= ?", bidMultpl))
}

// BidMultplNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplNe(bidMultpl float64) ProductQuerySet {
	return qs.w(qs.db.Where("bid_multpl != ?", bidMultpl))
}

// BidMultplNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) BidMultplNotIn(bidMultpl ...float64) ProductQuerySet {
	if len(bidMultpl) == 0 {
		qs.db.AddError(errors.New("must at least pass one bidMultpl in BidMultplNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bid_multpl NOT IN (?)", bidMultpl))
}

// ClosedATEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATEq(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at = ?", closedAT))
}

// ClosedATGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATGt(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at > ?", closedAT))
}

// ClosedATGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATGte(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at >= ?", closedAT))
}

// ClosedATIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATIsNotNull() ProductQuerySet {
	return qs.w(qs.db.Where("closed_at IS NOT NULL"))
}

// ClosedATIsNull is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATIsNull() ProductQuerySet {
	return qs.w(qs.db.Where("closed_at IS NULL"))
}

// ClosedATLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATLt(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at < ?", closedAT))
}

// ClosedATLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATLte(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at <= ?", closedAT))
}

// ClosedATNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedATNe(closedAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("closed_at != ?", closedAT))
}

// ClosedEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedEq(closed bool) ProductQuerySet {
	return qs.w(qs.db.Where("closed = ?", closed))
}

// ClosedIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedIn(closed ...bool) ProductQuerySet {
	if len(closed) == 0 {
		qs.db.AddError(errors.New("must at least pass one closed in ClosedIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("closed IN (?)", closed))
}

// ClosedNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedNe(closed bool) ProductQuerySet {
	return qs.w(qs.db.Where("closed != ?", closed))
}

// ClosedNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ClosedNotIn(closed ...bool) ProductQuerySet {
	if len(closed) == 0 {
		qs.db.AddError(errors.New("must at least pass one closed in ClosedNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("closed NOT IN (?)", closed))
}

// ConditionAvgEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgEq(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg = ?", conditionAvg))
}

// ConditionAvgGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgGt(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg > ?", conditionAvg))
}

// ConditionAvgGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgGte(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg >= ?", conditionAvg))
}

// ConditionAvgIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgIn(conditionAvg ...float64) ProductQuerySet {
	if len(conditionAvg) == 0 {
		qs.db.AddError(errors.New("must at least pass one conditionAvg in ConditionAvgIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("condition_avg IN (?)", conditionAvg))
}

// ConditionAvgLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgLt(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg < ?", conditionAvg))
}

// ConditionAvgLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgLte(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg <= ?", conditionAvg))
}

// ConditionAvgNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgNe(conditionAvg float64) ProductQuerySet {
	return qs.w(qs.db.Where("condition_avg != ?", conditionAvg))
}

// ConditionAvgNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionAvgNotIn(conditionAvg ...float64) ProductQuerySet {
	if len(conditionAvg) == 0 {
		qs.db.AddError(errors.New("must at least pass one conditionAvg in ConditionAvgNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("condition_avg NOT IN (?)", conditionAvg))
}

// ConditionEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionEq(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition = ?", condition))
}

// ConditionGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionGt(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition > ?", condition))
}

// ConditionGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionGte(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition >= ?", condition))
}

// ConditionIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionIn(condition ...int32) ProductQuerySet {
	if len(condition) == 0 {
		qs.db.AddError(errors.New("must at least pass one condition in ConditionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("condition IN (?)", condition))
}

// ConditionLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionLt(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition < ?", condition))
}

// ConditionLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionLte(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition <= ?", condition))
}

// ConditionNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionNe(condition int32) ProductQuerySet {
	return qs.w(qs.db.Where("condition != ?", condition))
}

// ConditionNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ConditionNotIn(condition ...int32) ProductQuerySet {
	if len(condition) == 0 {
		qs.db.AddError(errors.New("must at least pass one condition in ConditionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("condition NOT IN (?)", condition))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedATEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATEq(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAT))
}

// CreatedATGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATGt(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAT))
}

// CreatedATGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATGte(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAT))
}

// CreatedATIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATIsNotNull() ProductQuerySet {
	return qs.w(qs.db.Where("created_at IS NOT NULL"))
}

// CreatedATIsNull is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATIsNull() ProductQuerySet {
	return qs.w(qs.db.Where("created_at IS NULL"))
}

// CreatedATLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATLt(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAT))
}

// CreatedATLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATLte(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAT))
}

// CreatedATNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) CreatedATNe(createdAT time.Time) ProductQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAT))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) Delete() error {
	return qs.db.Delete(Product{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Product{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Product{})
	return db.RowsAffected, db.Error
}

// DescEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescEq(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc = ?", desc))
}

// DescGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescGt(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc > ?", desc))
}

// DescGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescGte(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc >= ?", desc))
}

// DescIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescIn(desc ...string) ProductQuerySet {
	if len(desc) == 0 {
		qs.db.AddError(errors.New("must at least pass one desc in DescIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("desc IN (?)", desc))
}

// DescLike is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescLike(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc LIKE ?", desc))
}

// DescLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescLt(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc < ?", desc))
}

// DescLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescLte(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc <= ?", desc))
}

// DescNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescNe(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc != ?", desc))
}

// DescNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescNotIn(desc ...string) ProductQuerySet {
	if len(desc) == 0 {
		qs.db.AddError(errors.New("must at least pass one desc in DescNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("desc NOT IN (?)", desc))
}

// DescNotlike is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) DescNotlike(desc string) ProductQuerySet {
	return qs.w(qs.db.Where("desc NOT LIKE ?", desc))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) GetUpdater() ProductUpdater {
	return NewProductUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDEq(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDGt(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDGte(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDIn(ID ...int64) ProductQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDLt(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDLte(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDNe(ID int64) ProductQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) IDNotIn(ID ...int64) ProductQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) Limit(limit int) ProductQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) Offset(offset int) ProductQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProductQuerySet) One(ret *Product) error {
	return qs.db.First(ret).Error
}

// OrderAscByBidMultpl is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByBidMultpl() ProductQuerySet {
	return qs.w(qs.db.Order("bid_multpl ASC"))
}

// OrderAscByClosed is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByClosed() ProductQuerySet {
	return qs.w(qs.db.Order("closed ASC"))
}

// OrderAscByClosedAT is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByClosedAT() ProductQuerySet {
	return qs.w(qs.db.Order("closed_at ASC"))
}

// OrderAscByCondition is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByCondition() ProductQuerySet {
	return qs.w(qs.db.Order("condition ASC"))
}

// OrderAscByConditionAvg is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByConditionAvg() ProductQuerySet {
	return qs.w(qs.db.Order("condition_avg ASC"))
}

// OrderAscByCreatedAT is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByCreatedAT() ProductQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDesc is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByDesc() ProductQuerySet {
	return qs.w(qs.db.Order("desc ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByID() ProductQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByProductName is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByProductName() ProductQuerySet {
	return qs.w(qs.db.Order("product_name ASC"))
}

// OrderAscBySold is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscBySold() ProductQuerySet {
	return qs.w(qs.db.Order("sold ASC"))
}

// OrderAscByStartPrice is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByStartPrice() ProductQuerySet {
	return qs.w(qs.db.Order("start_price ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderAscByUserID() ProductQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByBidMultpl is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByBidMultpl() ProductQuerySet {
	return qs.w(qs.db.Order("bid_multpl DESC"))
}

// OrderDescByClosed is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByClosed() ProductQuerySet {
	return qs.w(qs.db.Order("closed DESC"))
}

// OrderDescByClosedAT is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByClosedAT() ProductQuerySet {
	return qs.w(qs.db.Order("closed_at DESC"))
}

// OrderDescByCondition is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByCondition() ProductQuerySet {
	return qs.w(qs.db.Order("condition DESC"))
}

// OrderDescByConditionAvg is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByConditionAvg() ProductQuerySet {
	return qs.w(qs.db.Order("condition_avg DESC"))
}

// OrderDescByCreatedAT is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByCreatedAT() ProductQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDesc is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByDesc() ProductQuerySet {
	return qs.w(qs.db.Order("desc DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByID() ProductQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByProductName is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByProductName() ProductQuerySet {
	return qs.w(qs.db.Order("product_name DESC"))
}

// OrderDescBySold is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescBySold() ProductQuerySet {
	return qs.w(qs.db.Order("sold DESC"))
}

// OrderDescByStartPrice is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByStartPrice() ProductQuerySet {
	return qs.w(qs.db.Order("start_price DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) OrderDescByUserID() ProductQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// ProductNameEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameEq(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name = ?", productName))
}

// ProductNameGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameGt(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name > ?", productName))
}

// ProductNameGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameGte(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name >= ?", productName))
}

// ProductNameIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameIn(productName ...string) ProductQuerySet {
	if len(productName) == 0 {
		qs.db.AddError(errors.New("must at least pass one productName in ProductNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_name IN (?)", productName))
}

// ProductNameLike is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameLike(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name LIKE ?", productName))
}

// ProductNameLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameLt(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name < ?", productName))
}

// ProductNameLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameLte(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name <= ?", productName))
}

// ProductNameNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameNe(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name != ?", productName))
}

// ProductNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameNotIn(productName ...string) ProductQuerySet {
	if len(productName) == 0 {
		qs.db.AddError(errors.New("must at least pass one productName in ProductNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_name NOT IN (?)", productName))
}

// ProductNameNotlike is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) ProductNameNotlike(productName string) ProductQuerySet {
	return qs.w(qs.db.Where("product_name NOT LIKE ?", productName))
}

// SoldEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) SoldEq(sold bool) ProductQuerySet {
	return qs.w(qs.db.Where("sold = ?", sold))
}

// SoldIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) SoldIn(sold ...bool) ProductQuerySet {
	if len(sold) == 0 {
		qs.db.AddError(errors.New("must at least pass one sold in SoldIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sold IN (?)", sold))
}

// SoldNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) SoldNe(sold bool) ProductQuerySet {
	return qs.w(qs.db.Where("sold != ?", sold))
}

// SoldNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) SoldNotIn(sold ...bool) ProductQuerySet {
	if len(sold) == 0 {
		qs.db.AddError(errors.New("must at least pass one sold in SoldNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sold NOT IN (?)", sold))
}

// StartPriceEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceEq(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price = ?", startPrice))
}

// StartPriceGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceGt(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price > ?", startPrice))
}

// StartPriceGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceGte(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price >= ?", startPrice))
}

// StartPriceIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceIn(startPrice ...float64) ProductQuerySet {
	if len(startPrice) == 0 {
		qs.db.AddError(errors.New("must at least pass one startPrice in StartPriceIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("start_price IN (?)", startPrice))
}

// StartPriceLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceLt(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price < ?", startPrice))
}

// StartPriceLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceLte(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price <= ?", startPrice))
}

// StartPriceNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceNe(startPrice float64) ProductQuerySet {
	return qs.w(qs.db.Where("start_price != ?", startPrice))
}

// StartPriceNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) StartPriceNotIn(startPrice ...float64) ProductQuerySet {
	if len(startPrice) == 0 {
		qs.db.AddError(errors.New("must at least pass one startPrice in StartPriceNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("start_price NOT IN (?)", startPrice))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDEq(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDGt(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDGte(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDIn(userID ...int64) ProductQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDLt(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDLte(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDNe(userID int64) ProductQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProductQuerySet) UserIDNotIn(userID ...int64) ProductQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// SetBidMultpl is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetBidMultpl(bidMultpl float64) ProductUpdater {
	u.fields[string(ProductDBSchema.BidMultpl)] = bidMultpl
	return u
}

// SetClosed is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetClosed(closed bool) ProductUpdater {
	u.fields[string(ProductDBSchema.Closed)] = closed
	return u
}

// SetClosedAT is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetClosedAT(closedAT *time.Time) ProductUpdater {
	u.fields[string(ProductDBSchema.ClosedAT)] = closedAT
	return u
}

// SetCondition is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetCondition(condition int32) ProductUpdater {
	u.fields[string(ProductDBSchema.Condition)] = condition
	return u
}

// SetConditionAvg is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetConditionAvg(conditionAvg float64) ProductUpdater {
	u.fields[string(ProductDBSchema.ConditionAvg)] = conditionAvg
	return u
}

// SetCreatedAT is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetCreatedAT(createdAT *time.Time) ProductUpdater {
	u.fields[string(ProductDBSchema.CreatedAT)] = createdAT
	return u
}

// SetDesc is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetDesc(desc string) ProductUpdater {
	u.fields[string(ProductDBSchema.Desc)] = desc
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetID(ID int64) ProductUpdater {
	u.fields[string(ProductDBSchema.ID)] = ID
	return u
}

// SetProductName is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetProductName(productName string) ProductUpdater {
	u.fields[string(ProductDBSchema.ProductName)] = productName
	return u
}

// SetSold is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetSold(sold bool) ProductUpdater {
	u.fields[string(ProductDBSchema.Sold)] = sold
	return u
}

// SetStartPrice is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetStartPrice(startPrice float64) ProductUpdater {
	u.fields[string(ProductDBSchema.StartPrice)] = startPrice
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u ProductUpdater) SetUserID(userID int64) ProductUpdater {
	u.fields[string(ProductDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProductUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProductUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ProductQuerySet

// ===== BEGIN of Product modifiers

// ProductDBSchemaField describes database schema field. It requires for method 'Update'
type ProductDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProductDBSchemaField) String() string {
	return string(f)
}

// ProductDBSchema stores db field names of Product
var ProductDBSchema = struct {
	ID           ProductDBSchemaField
	UserID       ProductDBSchemaField
	ProductName  ProductDBSchemaField
	Desc         ProductDBSchemaField
	Condition    ProductDBSchemaField
	ConditionAvg ProductDBSchemaField
	StartPrice   ProductDBSchemaField
	BidMultpl    ProductDBSchemaField
	ClosedAT     ProductDBSchemaField
	CreatedAT    ProductDBSchemaField
	Sold         ProductDBSchemaField
	Closed       ProductDBSchemaField
}{

	ID:           ProductDBSchemaField("id"),
	UserID:       ProductDBSchemaField("user_id"),
	ProductName:  ProductDBSchemaField("product_name"),
	Desc:         ProductDBSchemaField("desc"),
	Condition:    ProductDBSchemaField("condition"),
	ConditionAvg: ProductDBSchemaField("condition_avg"),
	StartPrice:   ProductDBSchemaField("start_price"),
	BidMultpl:    ProductDBSchemaField("bid_multpl"),
	ClosedAT:     ProductDBSchemaField("closed_at"),
	CreatedAT:    ProductDBSchemaField("created_at"),
	Sold:         ProductDBSchemaField("sold"),
	Closed:       ProductDBSchemaField("closed"),
}

// Update updates Product fields by primary key
// nolint: dupl
func (o *Product) Update(db *gorm.DB, fields ...ProductDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":            o.ID,
		"user_id":       o.UserID,
		"product_name":  o.ProductName,
		"desc":          o.Desc,
		"condition":     o.Condition,
		"condition_avg": o.ConditionAvg,
		"start_price":   o.StartPrice,
		"bid_multpl":    o.BidMultpl,
		"closed_at":     o.ClosedAT,
		"created_at":    o.CreatedAT,
		"sold":          o.Sold,
		"closed":        o.Closed,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Product %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProductUpdater is an Product updates manager
type ProductUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProductUpdater creates new Product updater
// nolint: dupl
func NewProductUpdater(db *gorm.DB) ProductUpdater {
	return ProductUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Product{}),
	}
}

// ===== END of Product modifiers

// ===== END of all query sets
