// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserNotifQuerySet

// UserNotifQuerySet is an queryset type for UserNotif
type UserNotifQuerySet struct {
	db *gorm.DB
}

// NewUserNotifQuerySet constructs new UserNotifQuerySet
func NewUserNotifQuerySet(db *gorm.DB) UserNotifQuerySet {
	return UserNotifQuerySet{
		db: db.Model(&UserNotif{}),
	}
}

func (qs UserNotifQuerySet) w(db *gorm.DB) UserNotifQuerySet {
	return NewUserNotifQuerySet(db)
}

func (qs UserNotifQuerySet) Select(fields ...UserNotifDBSchemaField) UserNotifQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *UserNotif) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *UserNotif) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) All(ret *[]UserNotif) error {
	return qs.db.Find(ret).Error
}

// ContentEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentEq(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content = ?", content))
}

// ContentGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentGt(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content > ?", content))
}

// ContentGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentGte(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content >= ?", content))
}

// ContentIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentIn(content ...string) UserNotifQuerySet {
	if len(content) == 0 {
		qs.db.AddError(errors.New("must at least pass one content in ContentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("content IN (?)", content))
}

// ContentLike is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentLike(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content LIKE ?", content))
}

// ContentLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentLt(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content < ?", content))
}

// ContentLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentLte(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content <= ?", content))
}

// ContentNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentNe(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content != ?", content))
}

// ContentNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentNotIn(content ...string) UserNotifQuerySet {
	if len(content) == 0 {
		qs.db.AddError(errors.New("must at least pass one content in ContentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("content NOT IN (?)", content))
}

// ContentNotlike is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ContentNotlike(content string) UserNotifQuerySet {
	return qs.w(qs.db.Where("content NOT LIKE ?", content))
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedATEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATEq(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAT))
}

// CreatedATGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATGt(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAT))
}

// CreatedATGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATGte(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAT))
}

// CreatedATIsNotNull is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATIsNotNull() UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at IS NOT NULL"))
}

// CreatedATIsNull is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATIsNull() UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at IS NULL"))
}

// CreatedATLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATLt(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAT))
}

// CreatedATLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATLte(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAT))
}

// CreatedATNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) CreatedATNe(createdAT time.Time) UserNotifQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAT))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) Delete() error {
	return qs.db.Delete(UserNotif{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(UserNotif{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(UserNotif{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) GetUpdater() UserNotifUpdater {
	return NewUserNotifUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDEq(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDGt(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDGte(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDIn(ID ...int64) UserNotifQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDLt(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDLte(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDNe(ID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) IDNotIn(ID ...int64) UserNotifQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) Limit(limit int) UserNotifQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NotifTypeEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeEq(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type = ?", notifType))
}

// NotifTypeGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeGt(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type > ?", notifType))
}

// NotifTypeGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeGte(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type >= ?", notifType))
}

// NotifTypeIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeIn(notifType ...int) UserNotifQuerySet {
	if len(notifType) == 0 {
		qs.db.AddError(errors.New("must at least pass one notifType in NotifTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("notif_type IN (?)", notifType))
}

// NotifTypeLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeLt(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type < ?", notifType))
}

// NotifTypeLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeLte(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type <= ?", notifType))
}

// NotifTypeNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeNe(notifType int) UserNotifQuerySet {
	return qs.w(qs.db.Where("notif_type != ?", notifType))
}

// NotifTypeNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) NotifTypeNotIn(notifType ...int) UserNotifQuerySet {
	if len(notifType) == 0 {
		qs.db.AddError(errors.New("must at least pass one notifType in NotifTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("notif_type NOT IN (?)", notifType))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) Offset(offset int) UserNotifQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserNotifQuerySet) One(ret *UserNotif) error {
	return qs.db.First(ret).Error
}

// OrderAscByContent is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByContent() UserNotifQuerySet {
	return qs.w(qs.db.Order("content ASC"))
}

// OrderAscByCreatedAT is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByCreatedAT() UserNotifQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByID() UserNotifQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByNotifType is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByNotifType() UserNotifQuerySet {
	return qs.w(qs.db.Order("notif_type ASC"))
}

// OrderAscByRead is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByRead() UserNotifQuerySet {
	return qs.w(qs.db.Order("read ASC"))
}

// OrderAscByTarget is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByTarget() UserNotifQuerySet {
	return qs.w(qs.db.Order("target ASC"))
}

// OrderAscByTitle is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByTitle() UserNotifQuerySet {
	return qs.w(qs.db.Order("title ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderAscByUserID() UserNotifQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByContent is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByContent() UserNotifQuerySet {
	return qs.w(qs.db.Order("content DESC"))
}

// OrderDescByCreatedAT is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByCreatedAT() UserNotifQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByID() UserNotifQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByNotifType is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByNotifType() UserNotifQuerySet {
	return qs.w(qs.db.Order("notif_type DESC"))
}

// OrderDescByRead is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByRead() UserNotifQuerySet {
	return qs.w(qs.db.Order("read DESC"))
}

// OrderDescByTarget is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByTarget() UserNotifQuerySet {
	return qs.w(qs.db.Order("target DESC"))
}

// OrderDescByTitle is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByTitle() UserNotifQuerySet {
	return qs.w(qs.db.Order("title DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) OrderDescByUserID() UserNotifQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// ReadEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ReadEq(read bool) UserNotifQuerySet {
	return qs.w(qs.db.Where("read = ?", read))
}

// ReadIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ReadIn(read ...bool) UserNotifQuerySet {
	if len(read) == 0 {
		qs.db.AddError(errors.New("must at least pass one read in ReadIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("read IN (?)", read))
}

// ReadNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ReadNe(read bool) UserNotifQuerySet {
	return qs.w(qs.db.Where("read != ?", read))
}

// ReadNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) ReadNotIn(read ...bool) UserNotifQuerySet {
	if len(read) == 0 {
		qs.db.AddError(errors.New("must at least pass one read in ReadNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("read NOT IN (?)", read))
}

// TargetEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetEq(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target = ?", target))
}

// TargetGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetGt(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target > ?", target))
}

// TargetGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetGte(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target >= ?", target))
}

// TargetIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetIn(target ...int) UserNotifQuerySet {
	if len(target) == 0 {
		qs.db.AddError(errors.New("must at least pass one target in TargetIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("target IN (?)", target))
}

// TargetLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetLt(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target < ?", target))
}

// TargetLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetLte(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target <= ?", target))
}

// TargetNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetNe(target int) UserNotifQuerySet {
	return qs.w(qs.db.Where("target != ?", target))
}

// TargetNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TargetNotIn(target ...int) UserNotifQuerySet {
	if len(target) == 0 {
		qs.db.AddError(errors.New("must at least pass one target in TargetNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("target NOT IN (?)", target))
}

// TitleEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleEq(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title = ?", title))
}

// TitleGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleGt(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title > ?", title))
}

// TitleGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleGte(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title >= ?", title))
}

// TitleIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleIn(title ...string) UserNotifQuerySet {
	if len(title) == 0 {
		qs.db.AddError(errors.New("must at least pass one title in TitleIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("title IN (?)", title))
}

// TitleLike is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleLike(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title LIKE ?", title))
}

// TitleLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleLt(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title < ?", title))
}

// TitleLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleLte(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title <= ?", title))
}

// TitleNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleNe(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title != ?", title))
}

// TitleNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleNotIn(title ...string) UserNotifQuerySet {
	if len(title) == 0 {
		qs.db.AddError(errors.New("must at least pass one title in TitleNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("title NOT IN (?)", title))
}

// TitleNotlike is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) TitleNotlike(title string) UserNotifQuerySet {
	return qs.w(qs.db.Where("title NOT LIKE ?", title))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDEq(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDGt(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDGte(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDIn(userID ...int64) UserNotifQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDLt(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDLte(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDNe(userID int64) UserNotifQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserNotifQuerySet) UserIDNotIn(userID ...int64) UserNotifQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// SetContent is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetContent(content string) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.Content)] = content
	return u
}

// SetCreatedAT is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetCreatedAT(createdAT *time.Time) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.CreatedAT)] = createdAT
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetID(ID int64) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.ID)] = ID
	return u
}

// SetNotifType is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetNotifType(notifType int) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.NotifType)] = notifType
	return u
}

// SetRead is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetRead(read bool) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.Read)] = read
	return u
}

// SetTarget is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetTarget(target int) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.Target)] = target
	return u
}

// SetTitle is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetTitle(title string) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.Title)] = title
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) SetUserID(userID int64) UserNotifUpdater {
	u.fields[string(UserNotifDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserNotifUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserNotifQuerySet

// ===== BEGIN of UserNotif modifiers

// UserNotifDBSchemaField describes database schema field. It requires for method 'Update'
type UserNotifDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserNotifDBSchemaField) String() string {
	return string(f)
}

// UserNotifDBSchema stores db field names of UserNotif
var UserNotifDBSchema = struct {
	ID        UserNotifDBSchemaField
	UserID    UserNotifDBSchemaField
	Title     UserNotifDBSchemaField
	Content   UserNotifDBSchemaField
	NotifType UserNotifDBSchemaField
	Target    UserNotifDBSchemaField
	CreatedAT UserNotifDBSchemaField
	Read      UserNotifDBSchemaField
}{

	ID:        UserNotifDBSchemaField("id"),
	UserID:    UserNotifDBSchemaField("user_id"),
	Title:     UserNotifDBSchemaField("title"),
	Content:   UserNotifDBSchemaField("content"),
	NotifType: UserNotifDBSchemaField("notif_type"),
	Target:    UserNotifDBSchemaField("target"),
	CreatedAT: UserNotifDBSchemaField("created_at"),
	Read:      UserNotifDBSchemaField("read"),
}

// Update updates UserNotif fields by primary key
// nolint: dupl
func (o *UserNotif) Update(db *gorm.DB, fields ...UserNotifDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"user_id":    o.UserID,
		"title":      o.Title,
		"content":    o.Content,
		"notif_type": o.NotifType,
		"target":     o.Target,
		"created_at": o.CreatedAT,
		"read":       o.Read,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update UserNotif %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserNotifUpdater is an UserNotif updates manager
type UserNotifUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserNotifUpdater creates new UserNotif updater
// nolint: dupl
func NewUserNotifUpdater(db *gorm.DB) UserNotifUpdater {
	return UserNotifUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&UserNotif{}),
	}
}

// ===== END of UserNotif modifiers

// ===== END of all query sets
