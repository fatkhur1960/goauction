// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AccessTokenQuerySet

// AccessTokenQuerySet is an queryset type for AccessToken
type AccessTokenQuerySet struct {
	db *gorm.DB
}

// NewAccessTokenQuerySet constructs new AccessTokenQuerySet
func NewAccessTokenQuerySet(db *gorm.DB) AccessTokenQuerySet {
	return AccessTokenQuerySet{
		db: db.Model(&AccessToken{}),
	}
}

func (qs AccessTokenQuerySet) w(db *gorm.DB) AccessTokenQuerySet {
	return NewAccessTokenQuerySet(db)
}

func (qs AccessTokenQuerySet) Select(fields ...AccessTokenDBSchemaField) AccessTokenQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *AccessToken) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *AccessToken) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) All(ret *[]AccessToken) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedEq is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedEq(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created = ?", created))
}

// CreatedGt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedGt(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created > ?", created))
}

// CreatedGte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedGte(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created >= ?", created))
}

// CreatedLt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedLt(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created < ?", created))
}

// CreatedLte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedLte(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created <= ?", created))
}

// CreatedNe is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) CreatedNe(created time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("created != ?", created))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) Delete() error {
	return qs.db.Delete(AccessToken{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(AccessToken{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(AccessToken{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) GetUpdater() AccessTokenUpdater {
	return NewAccessTokenUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) Limit(limit int) AccessTokenQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) Offset(offset int) AccessTokenQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AccessTokenQuerySet) One(ret *AccessToken) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreated is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderAscByCreated() AccessTokenQuerySet {
	return qs.w(qs.db.Order("created ASC"))
}

// OrderAscByToken is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderAscByToken() AccessTokenQuerySet {
	return qs.w(qs.db.Order("token ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderAscByUserID() AccessTokenQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderAscByValidThru is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderAscByValidThru() AccessTokenQuerySet {
	return qs.w(qs.db.Order("valid_thru ASC"))
}

// OrderDescByCreated is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderDescByCreated() AccessTokenQuerySet {
	return qs.w(qs.db.Order("created DESC"))
}

// OrderDescByToken is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderDescByToken() AccessTokenQuerySet {
	return qs.w(qs.db.Order("token DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderDescByUserID() AccessTokenQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// OrderDescByValidThru is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) OrderDescByValidThru() AccessTokenQuerySet {
	return qs.w(qs.db.Order("valid_thru DESC"))
}

// PreloadUser is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) PreloadUser() AccessTokenQuerySet {
	return qs.w(qs.db.Preload("User"))
}

// TokenEq is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenEq(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token = ?", token))
}

// TokenGt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenGt(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token > ?", token))
}

// TokenGte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenGte(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token >= ?", token))
}

// TokenIn is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenIn(token ...string) AccessTokenQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token IN (?)", token))
}

// TokenLike is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenLike(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token LIKE ?", token))
}

// TokenLt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenLt(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token < ?", token))
}

// TokenLte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenLte(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token <= ?", token))
}

// TokenNe is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenNe(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token != ?", token))
}

// TokenNotIn is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenNotIn(token ...string) AccessTokenQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token NOT IN (?)", token))
}

// TokenNotlike is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) TokenNotlike(token string) AccessTokenQuerySet {
	return qs.w(qs.db.Where("token NOT LIKE ?", token))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDEq(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDGt(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDGte(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDIn(userID ...int64) AccessTokenQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDLt(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDLte(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDNe(userID int64) AccessTokenQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIDNotIn(userID ...int64) AccessTokenQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// UserIsNotNull is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIsNotNull() AccessTokenQuerySet {
	return qs.w(qs.db.Where("user IS NOT NULL"))
}

// UserIsNull is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) UserIsNull() AccessTokenQuerySet {
	return qs.w(qs.db.Where("user IS NULL"))
}

// ValidThruEq is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruEq(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru = ?", validThru))
}

// ValidThruGt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruGt(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru > ?", validThru))
}

// ValidThruGte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruGte(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru >= ?", validThru))
}

// ValidThruLt is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruLt(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru < ?", validThru))
}

// ValidThruLte is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruLte(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru <= ?", validThru))
}

// ValidThruNe is an autogenerated method
// nolint: dupl
func (qs AccessTokenQuerySet) ValidThruNe(validThru time.Time) AccessTokenQuerySet {
	return qs.w(qs.db.Where("valid_thru != ?", validThru))
}

// SetCreated is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) SetCreated(created time.Time) AccessTokenUpdater {
	u.fields[string(AccessTokenDBSchema.Created)] = created
	return u
}

// SetToken is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) SetToken(token string) AccessTokenUpdater {
	u.fields[string(AccessTokenDBSchema.Token)] = token
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) SetUserID(userID int64) AccessTokenUpdater {
	u.fields[string(AccessTokenDBSchema.UserID)] = userID
	return u
}

// SetValidThru is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) SetValidThru(validThru time.Time) AccessTokenUpdater {
	u.fields[string(AccessTokenDBSchema.ValidThru)] = validThru
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AccessTokenUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set AccessTokenQuerySet

// ===== BEGIN of AccessToken modifiers

// AccessTokenDBSchemaField describes database schema field. It requires for method 'Update'
type AccessTokenDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AccessTokenDBSchemaField) String() string {
	return string(f)
}

// AccessTokenDBSchema stores db field names of AccessToken
var AccessTokenDBSchema = struct {
	UserID    AccessTokenDBSchemaField
	User      AccessTokenDBSchemaField
	Token     AccessTokenDBSchemaField
	Created   AccessTokenDBSchemaField
	ValidThru AccessTokenDBSchemaField
}{

	UserID:    AccessTokenDBSchemaField("user_id"),
	User:      AccessTokenDBSchemaField("user"),
	Token:     AccessTokenDBSchemaField("token"),
	Created:   AccessTokenDBSchemaField("created"),
	ValidThru: AccessTokenDBSchemaField("valid_thru"),
}

// Update updates AccessToken fields by primary key
// nolint: dupl
func (o *AccessToken) Update(db *gorm.DB, fields ...AccessTokenDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"user_id":    o.UserID,
		"user":       o.User,
		"token":      o.Token,
		"created":    o.Created,
		"valid_thru": o.ValidThru,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update AccessToken %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AccessTokenUpdater is an AccessToken updates manager
type AccessTokenUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAccessTokenUpdater creates new AccessToken updater
// nolint: dupl
func NewAccessTokenUpdater(db *gorm.DB) AccessTokenUpdater {
	return AccessTokenUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&AccessToken{}),
	}
}

// ===== END of AccessToken modifiers

// ===== BEGIN of query set RegisterUserQuerySet

// RegisterUserQuerySet is an queryset type for RegisterUser
type RegisterUserQuerySet struct {
	db *gorm.DB
}

// NewRegisterUserQuerySet constructs new RegisterUserQuerySet
func NewRegisterUserQuerySet(db *gorm.DB) RegisterUserQuerySet {
	return RegisterUserQuerySet{
		db: db.Model(&RegisterUser{}),
	}
}

func (qs RegisterUserQuerySet) w(db *gorm.DB) RegisterUserQuerySet {
	return NewRegisterUserQuerySet(db)
}

func (qs RegisterUserQuerySet) Select(fields ...RegisterUserDBSchemaField) RegisterUserQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *RegisterUser) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *RegisterUser) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) All(ret *[]RegisterUser) error {
	return qs.db.Find(ret).Error
}

// CodeEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeEq(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code = ?", code))
}

// CodeGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeGt(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code > ?", code))
}

// CodeGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeGte(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code >= ?", code))
}

// CodeIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeIn(code ...string) RegisterUserQuerySet {
	if len(code) == 0 {
		qs.db.AddError(errors.New("must at least pass one code in CodeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("code IN (?)", code))
}

// CodeLike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeLike(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code LIKE ?", code))
}

// CodeLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeLt(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code < ?", code))
}

// CodeLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeLte(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code <= ?", code))
}

// CodeNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeNe(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code != ?", code))
}

// CodeNotIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeNotIn(code ...string) RegisterUserQuerySet {
	if len(code) == 0 {
		qs.db.AddError(errors.New("must at least pass one code in CodeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("code NOT IN (?)", code))
}

// CodeNotlike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) CodeNotlike(code string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("code NOT LIKE ?", code))
}

// Count is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) Delete() error {
	return qs.db.Delete(RegisterUser{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(RegisterUser{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(RegisterUser{})
	return db.RowsAffected, db.Error
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailEq(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailGt(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email > ?", email))
}

// EmailGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailGte(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email >= ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailIn(email ...string) RegisterUserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email IN (?)", email))
}

// EmailLike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailLike(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email LIKE ?", email))
}

// EmailLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailLt(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email < ?", email))
}

// EmailLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailLte(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email <= ?", email))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailNe(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailNotIn(email ...string) RegisterUserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", email))
}

// EmailNotlike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) EmailNotlike(email string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("email NOT LIKE ?", email))
}

// FullNameEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameEq(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name = ?", fullName))
}

// FullNameGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameGt(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name > ?", fullName))
}

// FullNameGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameGte(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name >= ?", fullName))
}

// FullNameIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameIn(fullName ...string) RegisterUserQuerySet {
	if len(fullName) == 0 {
		qs.db.AddError(errors.New("must at least pass one fullName in FullNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("full_name IN (?)", fullName))
}

// FullNameLike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameLike(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name LIKE ?", fullName))
}

// FullNameLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameLt(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name < ?", fullName))
}

// FullNameLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameLte(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name <= ?", fullName))
}

// FullNameNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameNe(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name != ?", fullName))
}

// FullNameNotIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameNotIn(fullName ...string) RegisterUserQuerySet {
	if len(fullName) == 0 {
		qs.db.AddError(errors.New("must at least pass one fullName in FullNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("full_name NOT IN (?)", fullName))
}

// FullNameNotlike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) FullNameNotlike(fullName string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("full_name NOT LIKE ?", fullName))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) GetUpdater() RegisterUserUpdater {
	return NewRegisterUserUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) Limit(limit int) RegisterUserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) Offset(offset int) RegisterUserQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs RegisterUserQuerySet) One(ret *RegisterUser) error {
	return qs.db.First(ret).Error
}

// OrderAscByCode is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByCode() RegisterUserQuerySet {
	return qs.w(qs.db.Order("code ASC"))
}

// OrderAscByEmail is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByEmail() RegisterUserQuerySet {
	return qs.w(qs.db.Order("email ASC"))
}

// OrderAscByFullName is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByFullName() RegisterUserQuerySet {
	return qs.w(qs.db.Order("full_name ASC"))
}

// OrderAscByPhoneNum is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByPhoneNum() RegisterUserQuerySet {
	return qs.w(qs.db.Order("phone_num ASC"))
}

// OrderAscByRegisteredAt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByRegisteredAt() RegisterUserQuerySet {
	return qs.w(qs.db.Order("registered_at ASC"))
}

// OrderAscByToken is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderAscByToken() RegisterUserQuerySet {
	return qs.w(qs.db.Order("token ASC"))
}

// OrderDescByCode is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByCode() RegisterUserQuerySet {
	return qs.w(qs.db.Order("code DESC"))
}

// OrderDescByEmail is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByEmail() RegisterUserQuerySet {
	return qs.w(qs.db.Order("email DESC"))
}

// OrderDescByFullName is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByFullName() RegisterUserQuerySet {
	return qs.w(qs.db.Order("full_name DESC"))
}

// OrderDescByPhoneNum is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByPhoneNum() RegisterUserQuerySet {
	return qs.w(qs.db.Order("phone_num DESC"))
}

// OrderDescByRegisteredAt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByRegisteredAt() RegisterUserQuerySet {
	return qs.w(qs.db.Order("registered_at DESC"))
}

// OrderDescByToken is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) OrderDescByToken() RegisterUserQuerySet {
	return qs.w(qs.db.Order("token DESC"))
}

// PhoneNumEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumEq(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num = ?", phoneNum))
}

// PhoneNumGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumGt(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num > ?", phoneNum))
}

// PhoneNumGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumGte(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num >= ?", phoneNum))
}

// PhoneNumIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumIn(phoneNum ...string) RegisterUserQuerySet {
	if len(phoneNum) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNum in PhoneNumIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("phone_num IN (?)", phoneNum))
}

// PhoneNumLike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumLike(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num LIKE ?", phoneNum))
}

// PhoneNumLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumLt(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num < ?", phoneNum))
}

// PhoneNumLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumLte(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num <= ?", phoneNum))
}

// PhoneNumNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumNe(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num != ?", phoneNum))
}

// PhoneNumNotIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumNotIn(phoneNum ...string) RegisterUserQuerySet {
	if len(phoneNum) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNum in PhoneNumNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("phone_num NOT IN (?)", phoneNum))
}

// PhoneNumNotlike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) PhoneNumNotlike(phoneNum string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("phone_num NOT LIKE ?", phoneNum))
}

// RegisteredAtEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtEq(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at = ?", registeredAt))
}

// RegisteredAtGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtGt(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at > ?", registeredAt))
}

// RegisteredAtGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtGte(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at >= ?", registeredAt))
}

// RegisteredAtLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtLt(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at < ?", registeredAt))
}

// RegisteredAtLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtLte(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at <= ?", registeredAt))
}

// RegisteredAtNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) RegisteredAtNe(registeredAt time.Time) RegisterUserQuerySet {
	return qs.w(qs.db.Where("registered_at != ?", registeredAt))
}

// TokenEq is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenEq(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token = ?", token))
}

// TokenGt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenGt(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token > ?", token))
}

// TokenGte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenGte(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token >= ?", token))
}

// TokenIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenIn(token ...string) RegisterUserQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token IN (?)", token))
}

// TokenLike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenLike(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token LIKE ?", token))
}

// TokenLt is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenLt(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token < ?", token))
}

// TokenLte is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenLte(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token <= ?", token))
}

// TokenNe is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenNe(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token != ?", token))
}

// TokenNotIn is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenNotIn(token ...string) RegisterUserQuerySet {
	if len(token) == 0 {
		qs.db.AddError(errors.New("must at least pass one token in TokenNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("token NOT IN (?)", token))
}

// TokenNotlike is an autogenerated method
// nolint: dupl
func (qs RegisterUserQuerySet) TokenNotlike(token string) RegisterUserQuerySet {
	return qs.w(qs.db.Where("token NOT LIKE ?", token))
}

// SetCode is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetCode(code string) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.Code)] = code
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetEmail(email string) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.Email)] = email
	return u
}

// SetFullName is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetFullName(fullName string) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.FullName)] = fullName
	return u
}

// SetPhoneNum is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetPhoneNum(phoneNum string) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.PhoneNum)] = phoneNum
	return u
}

// SetRegisteredAt is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetRegisteredAt(registeredAt time.Time) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.RegisteredAt)] = registeredAt
	return u
}

// SetToken is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) SetToken(token string) RegisterUserUpdater {
	u.fields[string(RegisterUserDBSchema.Token)] = token
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u RegisterUserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set RegisterUserQuerySet

// ===== BEGIN of RegisterUser modifiers

// RegisterUserDBSchemaField describes database schema field. It requires for method 'Update'
type RegisterUserDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f RegisterUserDBSchemaField) String() string {
	return string(f)
}

// RegisterUserDBSchema stores db field names of RegisterUser
var RegisterUserDBSchema = struct {
	FullName     RegisterUserDBSchemaField
	Email        RegisterUserDBSchemaField
	PhoneNum     RegisterUserDBSchemaField
	Token        RegisterUserDBSchemaField
	Code         RegisterUserDBSchemaField
	RegisteredAt RegisterUserDBSchemaField
}{

	FullName:     RegisterUserDBSchemaField("full_name"),
	Email:        RegisterUserDBSchemaField("email"),
	PhoneNum:     RegisterUserDBSchemaField("phone_num"),
	Token:        RegisterUserDBSchemaField("token"),
	Code:         RegisterUserDBSchemaField("code"),
	RegisteredAt: RegisterUserDBSchemaField("registered_at"),
}

// Update updates RegisterUser fields by primary key
// nolint: dupl
func (o *RegisterUser) Update(db *gorm.DB, fields ...RegisterUserDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"full_name":     o.FullName,
		"email":         o.Email,
		"phone_num":     o.PhoneNum,
		"token":         o.Token,
		"code":          o.Code,
		"registered_at": o.RegisteredAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update RegisterUser %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// RegisterUserUpdater is an RegisterUser updates manager
type RegisterUserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewRegisterUserUpdater creates new RegisterUser updater
// nolint: dupl
func NewRegisterUserUpdater(db *gorm.DB) RegisterUserUpdater {
	return RegisterUserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&RegisterUser{}),
	}
}

// ===== END of RegisterUser modifiers

// ===== BEGIN of query set StoreQuerySet

// StoreQuerySet is an queryset type for Store
type StoreQuerySet struct {
	db *gorm.DB
}

// NewStoreQuerySet constructs new StoreQuerySet
func NewStoreQuerySet(db *gorm.DB) StoreQuerySet {
	return StoreQuerySet{
		db: db.Model(&Store{}),
	}
}

func (qs StoreQuerySet) w(db *gorm.DB) StoreQuerySet {
	return NewStoreQuerySet(db)
}

func (qs StoreQuerySet) Select(fields ...StoreDBSchemaField) StoreQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Store) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Store) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// AddressEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressEq(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address = ?", address))
}

// AddressGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressGt(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address > ?", address))
}

// AddressGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressGte(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address >= ?", address))
}

// AddressIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressIn(address ...string) StoreQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address IN (?)", address))
}

// AddressLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressLike(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address LIKE ?", address))
}

// AddressLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressLt(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address < ?", address))
}

// AddressLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressLte(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address <= ?", address))
}

// AddressNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressNe(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address != ?", address))
}

// AddressNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressNotIn(address ...string) StoreQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address NOT IN (?)", address))
}

// AddressNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AddressNotlike(address string) StoreQuerySet {
	return qs.w(qs.db.Where("address NOT LIKE ?", address))
}

// All is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) All(ret *[]Store) error {
	return qs.db.Find(ret).Error
}

// AnnouncementEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementEq(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement = ?", announcement))
}

// AnnouncementGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementGt(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement > ?", announcement))
}

// AnnouncementGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementGte(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement >= ?", announcement))
}

// AnnouncementIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementIn(announcement ...string) StoreQuerySet {
	if len(announcement) == 0 {
		qs.db.AddError(errors.New("must at least pass one announcement in AnnouncementIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("announcement IN (?)", announcement))
}

// AnnouncementLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementLike(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement LIKE ?", announcement))
}

// AnnouncementLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementLt(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement < ?", announcement))
}

// AnnouncementLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementLte(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement <= ?", announcement))
}

// AnnouncementNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementNe(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement != ?", announcement))
}

// AnnouncementNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementNotIn(announcement ...string) StoreQuerySet {
	if len(announcement) == 0 {
		qs.db.AddError(errors.New("must at least pass one announcement in AnnouncementNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("announcement NOT IN (?)", announcement))
}

// AnnouncementNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) AnnouncementNotlike(announcement string) StoreQuerySet {
	return qs.w(qs.db.Where("announcement NOT LIKE ?", announcement))
}

// Count is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Delete() error {
	return qs.db.Delete(Store{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Store{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Store{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) GetUpdater() StoreUpdater {
	return NewStoreUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDEq(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDGt(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDGte(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDIn(ID ...int64) StoreQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDLt(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDLte(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDNe(ID int64) StoreQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDNotIn(ID ...int64) StoreQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// InfoEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoEq(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info = ?", info))
}

// InfoGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoGt(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info > ?", info))
}

// InfoGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoGte(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info >= ?", info))
}

// InfoIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoIn(info ...string) StoreQuerySet {
	if len(info) == 0 {
		qs.db.AddError(errors.New("must at least pass one info in InfoIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("info IN (?)", info))
}

// InfoLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoLike(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info LIKE ?", info))
}

// InfoLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoLt(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info < ?", info))
}

// InfoLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoLte(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info <= ?", info))
}

// InfoNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoNe(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info != ?", info))
}

// InfoNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoNotIn(info ...string) StoreQuerySet {
	if len(info) == 0 {
		qs.db.AddError(errors.New("must at least pass one info in InfoNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("info NOT IN (?)", info))
}

// InfoNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) InfoNotlike(info string) StoreQuerySet {
	return qs.w(qs.db.Where("info NOT LIKE ?", info))
}

// LastUpdatedEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedEq(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated = ?", lastUpdated))
}

// LastUpdatedGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedGt(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated > ?", lastUpdated))
}

// LastUpdatedGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedGte(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated >= ?", lastUpdated))
}

// LastUpdatedIsNotNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedIsNotNull() StoreQuerySet {
	return qs.w(qs.db.Where("last_updated IS NOT NULL"))
}

// LastUpdatedIsNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedIsNull() StoreQuerySet {
	return qs.w(qs.db.Where("last_updated IS NULL"))
}

// LastUpdatedLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedLt(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated < ?", lastUpdated))
}

// LastUpdatedLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedLte(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated <= ?", lastUpdated))
}

// LastUpdatedNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) LastUpdatedNe(lastUpdated time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("last_updated != ?", lastUpdated))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Limit(limit int) StoreQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameEq(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameGt(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name > ?", name))
}

// NameGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameGte(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name >= ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameIn(name ...string) StoreQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameLike(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name LIKE ?", name))
}

// NameLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameLt(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name < ?", name))
}

// NameLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameLte(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name <= ?", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameNe(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameNotIn(name ...string) StoreQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// NameNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameNotlike(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name NOT LIKE ?", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Offset(offset int) StoreQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs StoreQuerySet) One(ret *Store) error {
	return qs.db.First(ret).Error
}

// OrderAscByAddress is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByAddress() StoreQuerySet {
	return qs.w(qs.db.Order("address ASC"))
}

// OrderAscByAnnouncement is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByAnnouncement() StoreQuerySet {
	return qs.w(qs.db.Order("announcement ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByID() StoreQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByInfo is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByInfo() StoreQuerySet {
	return qs.w(qs.db.Order("info ASC"))
}

// OrderAscByLastUpdated is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByLastUpdated() StoreQuerySet {
	return qs.w(qs.db.Order("last_updated ASC"))
}

// OrderAscByName is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByName() StoreQuerySet {
	return qs.w(qs.db.Order("name ASC"))
}

// OrderAscByOwnerID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByOwnerID() StoreQuerySet {
	return qs.w(qs.db.Order("owner_id ASC"))
}

// OrderAscByProductCount is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByProductCount() StoreQuerySet {
	return qs.w(qs.db.Order("product_count ASC"))
}

// OrderAscByProvince is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByProvince() StoreQuerySet {
	return qs.w(qs.db.Order("province ASC"))
}

// OrderAscByRegency is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByRegency() StoreQuerySet {
	return qs.w(qs.db.Order("regency ASC"))
}

// OrderAscBySUBDistrict is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscBySUBDistrict() StoreQuerySet {
	return qs.w(qs.db.Order("sub_district ASC"))
}

// OrderAscByTS is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByTS() StoreQuerySet {
	return qs.w(qs.db.Order("ts ASC"))
}

// OrderAscByVillage is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByVillage() StoreQuerySet {
	return qs.w(qs.db.Order("village ASC"))
}

// OrderDescByAddress is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByAddress() StoreQuerySet {
	return qs.w(qs.db.Order("address DESC"))
}

// OrderDescByAnnouncement is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByAnnouncement() StoreQuerySet {
	return qs.w(qs.db.Order("announcement DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByID() StoreQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByInfo is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByInfo() StoreQuerySet {
	return qs.w(qs.db.Order("info DESC"))
}

// OrderDescByLastUpdated is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByLastUpdated() StoreQuerySet {
	return qs.w(qs.db.Order("last_updated DESC"))
}

// OrderDescByName is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByName() StoreQuerySet {
	return qs.w(qs.db.Order("name DESC"))
}

// OrderDescByOwnerID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByOwnerID() StoreQuerySet {
	return qs.w(qs.db.Order("owner_id DESC"))
}

// OrderDescByProductCount is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByProductCount() StoreQuerySet {
	return qs.w(qs.db.Order("product_count DESC"))
}

// OrderDescByProvince is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByProvince() StoreQuerySet {
	return qs.w(qs.db.Order("province DESC"))
}

// OrderDescByRegency is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByRegency() StoreQuerySet {
	return qs.w(qs.db.Order("regency DESC"))
}

// OrderDescBySUBDistrict is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescBySUBDistrict() StoreQuerySet {
	return qs.w(qs.db.Order("sub_district DESC"))
}

// OrderDescByTS is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByTS() StoreQuerySet {
	return qs.w(qs.db.Order("ts DESC"))
}

// OrderDescByVillage is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByVillage() StoreQuerySet {
	return qs.w(qs.db.Order("village DESC"))
}

// OwnerIDEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDEq(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id = ?", ownerID))
}

// OwnerIDGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDGt(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id > ?", ownerID))
}

// OwnerIDGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDGte(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id >= ?", ownerID))
}

// OwnerIDIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDIn(ownerID ...int64) StoreQuerySet {
	if len(ownerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ownerID in OwnerIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("owner_id IN (?)", ownerID))
}

// OwnerIDLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDLt(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id < ?", ownerID))
}

// OwnerIDLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDLte(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id <= ?", ownerID))
}

// OwnerIDNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDNe(ownerID int64) StoreQuerySet {
	return qs.w(qs.db.Where("owner_id != ?", ownerID))
}

// OwnerIDNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OwnerIDNotIn(ownerID ...int64) StoreQuerySet {
	if len(ownerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ownerID in OwnerIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("owner_id NOT IN (?)", ownerID))
}

// ProductCountEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountEq(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count = ?", productCount))
}

// ProductCountGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountGt(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count > ?", productCount))
}

// ProductCountGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountGte(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count >= ?", productCount))
}

// ProductCountIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountIn(productCount ...int) StoreQuerySet {
	if len(productCount) == 0 {
		qs.db.AddError(errors.New("must at least pass one productCount in ProductCountIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_count IN (?)", productCount))
}

// ProductCountLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountLt(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count < ?", productCount))
}

// ProductCountLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountLte(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count <= ?", productCount))
}

// ProductCountNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountNe(productCount int) StoreQuerySet {
	return qs.w(qs.db.Where("product_count != ?", productCount))
}

// ProductCountNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProductCountNotIn(productCount ...int) StoreQuerySet {
	if len(productCount) == 0 {
		qs.db.AddError(errors.New("must at least pass one productCount in ProductCountNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("product_count NOT IN (?)", productCount))
}

// ProvinceEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceEq(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province = ?", province))
}

// ProvinceGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceGt(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province > ?", province))
}

// ProvinceGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceGte(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province >= ?", province))
}

// ProvinceIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceIn(province ...string) StoreQuerySet {
	if len(province) == 0 {
		qs.db.AddError(errors.New("must at least pass one province in ProvinceIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("province IN (?)", province))
}

// ProvinceLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceLike(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province LIKE ?", province))
}

// ProvinceLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceLt(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province < ?", province))
}

// ProvinceLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceLte(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province <= ?", province))
}

// ProvinceNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceNe(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province != ?", province))
}

// ProvinceNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceNotIn(province ...string) StoreQuerySet {
	if len(province) == 0 {
		qs.db.AddError(errors.New("must at least pass one province in ProvinceNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("province NOT IN (?)", province))
}

// ProvinceNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) ProvinceNotlike(province string) StoreQuerySet {
	return qs.w(qs.db.Where("province NOT LIKE ?", province))
}

// RegencyEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyEq(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency = ?", regency))
}

// RegencyGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyGt(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency > ?", regency))
}

// RegencyGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyGte(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency >= ?", regency))
}

// RegencyIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyIn(regency ...string) StoreQuerySet {
	if len(regency) == 0 {
		qs.db.AddError(errors.New("must at least pass one regency in RegencyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("regency IN (?)", regency))
}

// RegencyLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyLike(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency LIKE ?", regency))
}

// RegencyLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyLt(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency < ?", regency))
}

// RegencyLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyLte(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency <= ?", regency))
}

// RegencyNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyNe(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency != ?", regency))
}

// RegencyNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyNotIn(regency ...string) StoreQuerySet {
	if len(regency) == 0 {
		qs.db.AddError(errors.New("must at least pass one regency in RegencyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("regency NOT IN (?)", regency))
}

// RegencyNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) RegencyNotlike(regency string) StoreQuerySet {
	return qs.w(qs.db.Where("regency NOT LIKE ?", regency))
}

// SUBDistrictEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictEq(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district = ?", sUBDistrict))
}

// SUBDistrictGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictGt(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district > ?", sUBDistrict))
}

// SUBDistrictGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictGte(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district >= ?", sUBDistrict))
}

// SUBDistrictIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictIn(sUBDistrict ...string) StoreQuerySet {
	if len(sUBDistrict) == 0 {
		qs.db.AddError(errors.New("must at least pass one sUBDistrict in SUBDistrictIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sub_district IN (?)", sUBDistrict))
}

// SUBDistrictLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictLike(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district LIKE ?", sUBDistrict))
}

// SUBDistrictLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictLt(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district < ?", sUBDistrict))
}

// SUBDistrictLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictLte(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district <= ?", sUBDistrict))
}

// SUBDistrictNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictNe(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district != ?", sUBDistrict))
}

// SUBDistrictNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictNotIn(sUBDistrict ...string) StoreQuerySet {
	if len(sUBDistrict) == 0 {
		qs.db.AddError(errors.New("must at least pass one sUBDistrict in SUBDistrictNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sub_district NOT IN (?)", sUBDistrict))
}

// SUBDistrictNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) SUBDistrictNotlike(sUBDistrict string) StoreQuerySet {
	return qs.w(qs.db.Where("sub_district NOT LIKE ?", sUBDistrict))
}

// TSEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSEq(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts = ?", tS))
}

// TSGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSGt(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts > ?", tS))
}

// TSGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSGte(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts >= ?", tS))
}

// TSIsNotNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSIsNotNull() StoreQuerySet {
	return qs.w(qs.db.Where("ts IS NOT NULL"))
}

// TSIsNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSIsNull() StoreQuerySet {
	return qs.w(qs.db.Where("ts IS NULL"))
}

// TSLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSLt(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts < ?", tS))
}

// TSLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSLte(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts <= ?", tS))
}

// TSNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) TSNe(tS time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("ts != ?", tS))
}

// VillageEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageEq(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village = ?", village))
}

// VillageGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageGt(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village > ?", village))
}

// VillageGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageGte(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village >= ?", village))
}

// VillageIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageIn(village ...string) StoreQuerySet {
	if len(village) == 0 {
		qs.db.AddError(errors.New("must at least pass one village in VillageIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("village IN (?)", village))
}

// VillageLike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageLike(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village LIKE ?", village))
}

// VillageLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageLt(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village < ?", village))
}

// VillageLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageLte(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village <= ?", village))
}

// VillageNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageNe(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village != ?", village))
}

// VillageNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageNotIn(village ...string) StoreQuerySet {
	if len(village) == 0 {
		qs.db.AddError(errors.New("must at least pass one village in VillageNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("village NOT IN (?)", village))
}

// VillageNotlike is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) VillageNotlike(village string) StoreQuerySet {
	return qs.w(qs.db.Where("village NOT LIKE ?", village))
}

// SetAddress is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetAddress(address string) StoreUpdater {
	u.fields[string(StoreDBSchema.Address)] = address
	return u
}

// SetAnnouncement is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetAnnouncement(announcement string) StoreUpdater {
	u.fields[string(StoreDBSchema.Announcement)] = announcement
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetID(ID int64) StoreUpdater {
	u.fields[string(StoreDBSchema.ID)] = ID
	return u
}

// SetInfo is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetInfo(info string) StoreUpdater {
	u.fields[string(StoreDBSchema.Info)] = info
	return u
}

// SetLastUpdated is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetLastUpdated(lastUpdated *time.Time) StoreUpdater {
	u.fields[string(StoreDBSchema.LastUpdated)] = lastUpdated
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetName(name string) StoreUpdater {
	u.fields[string(StoreDBSchema.Name)] = name
	return u
}

// SetOwnerID is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetOwnerID(ownerID int64) StoreUpdater {
	u.fields[string(StoreDBSchema.OwnerID)] = ownerID
	return u
}

// SetProductCount is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetProductCount(productCount int) StoreUpdater {
	u.fields[string(StoreDBSchema.ProductCount)] = productCount
	return u
}

// SetProvince is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetProvince(province string) StoreUpdater {
	u.fields[string(StoreDBSchema.Province)] = province
	return u
}

// SetRegency is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetRegency(regency string) StoreUpdater {
	u.fields[string(StoreDBSchema.Regency)] = regency
	return u
}

// SetSUBDistrict is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetSUBDistrict(sUBDistrict string) StoreUpdater {
	u.fields[string(StoreDBSchema.SUBDistrict)] = sUBDistrict
	return u
}

// SetTS is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetTS(tS *time.Time) StoreUpdater {
	u.fields[string(StoreDBSchema.TS)] = tS
	return u
}

// SetVillage is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetVillage(village string) StoreUpdater {
	u.fields[string(StoreDBSchema.Village)] = village
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u StoreUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u StoreUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set StoreQuerySet

// ===== BEGIN of Store modifiers

// StoreDBSchemaField describes database schema field. It requires for method 'Update'
type StoreDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f StoreDBSchemaField) String() string {
	return string(f)
}

// StoreDBSchema stores db field names of Store
var StoreDBSchema = struct {
	ID           StoreDBSchemaField
	Name         StoreDBSchemaField
	Info         StoreDBSchemaField
	OwnerID      StoreDBSchemaField
	Announcement StoreDBSchemaField
	ProductCount StoreDBSchemaField
	Province     StoreDBSchemaField
	Regency      StoreDBSchemaField
	SUBDistrict  StoreDBSchemaField
	Village      StoreDBSchemaField
	Address      StoreDBSchemaField
	LastUpdated  StoreDBSchemaField
	TS           StoreDBSchemaField
}{

	ID:           StoreDBSchemaField("id"),
	Name:         StoreDBSchemaField("name"),
	Info:         StoreDBSchemaField("info"),
	OwnerID:      StoreDBSchemaField("owner_id"),
	Announcement: StoreDBSchemaField("announcement"),
	ProductCount: StoreDBSchemaField("product_count"),
	Province:     StoreDBSchemaField("province"),
	Regency:      StoreDBSchemaField("regency"),
	SUBDistrict:  StoreDBSchemaField("sub_district"),
	Village:      StoreDBSchemaField("village"),
	Address:      StoreDBSchemaField("address"),
	LastUpdated:  StoreDBSchemaField("last_updated"),
	TS:           StoreDBSchemaField("ts"),
}

// Update updates Store fields by primary key
// nolint: dupl
func (o *Store) Update(db *gorm.DB, fields ...StoreDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":            o.ID,
		"name":          o.Name,
		"info":          o.Info,
		"owner_id":      o.OwnerID,
		"announcement":  o.Announcement,
		"product_count": o.ProductCount,
		"province":      o.Province,
		"regency":       o.Regency,
		"sub_district":  o.SUBDistrict,
		"village":       o.Village,
		"address":       o.Address,
		"last_updated":  o.LastUpdated,
		"ts":            o.TS,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Store %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// StoreUpdater is an Store updates manager
type StoreUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewStoreUpdater creates new Store updater
// nolint: dupl
func NewStoreUpdater(db *gorm.DB) StoreUpdater {
	return StoreUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Store{}),
	}
}

// ===== END of Store modifiers

// ===== BEGIN of query set UserConnectQuerySet

// UserConnectQuerySet is an queryset type for UserConnect
type UserConnectQuerySet struct {
	db *gorm.DB
}

// NewUserConnectQuerySet constructs new UserConnectQuerySet
func NewUserConnectQuerySet(db *gorm.DB) UserConnectQuerySet {
	return UserConnectQuerySet{
		db: db.Model(&UserConnect{}),
	}
}

func (qs UserConnectQuerySet) w(db *gorm.DB) UserConnectQuerySet {
	return NewUserConnectQuerySet(db)
}

func (qs UserConnectQuerySet) Select(fields ...UserConnectDBSchemaField) UserConnectQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *UserConnect) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *UserConnect) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) All(ret *[]UserConnect) error {
	return qs.db.Find(ret).Error
}

// AppIDEq is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDEq(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id = ?", appID))
}

// AppIDGt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDGt(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id > ?", appID))
}

// AppIDGte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDGte(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id >= ?", appID))
}

// AppIDIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDIn(appID ...string) UserConnectQuerySet {
	if len(appID) == 0 {
		qs.db.AddError(errors.New("must at least pass one appID in AppIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("app_id IN (?)", appID))
}

// AppIDLike is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDLike(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id LIKE ?", appID))
}

// AppIDLt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDLt(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id < ?", appID))
}

// AppIDLte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDLte(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id <= ?", appID))
}

// AppIDNe is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDNe(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id != ?", appID))
}

// AppIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDNotIn(appID ...string) UserConnectQuerySet {
	if len(appID) == 0 {
		qs.db.AddError(errors.New("must at least pass one appID in AppIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("app_id NOT IN (?)", appID))
}

// AppIDNotlike is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) AppIDNotlike(appID string) UserConnectQuerySet {
	return qs.w(qs.db.Where("app_id NOT LIKE ?", appID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) Delete() error {
	return qs.db.Delete(UserConnect{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(UserConnect{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(UserConnect{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) GetUpdater() UserConnectUpdater {
	return NewUserConnectUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) Limit(limit int) UserConnectQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) Offset(offset int) UserConnectQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserConnectQuerySet) One(ret *UserConnect) error {
	return qs.db.First(ret).Error
}

// OrderAscByAppID is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderAscByAppID() UserConnectQuerySet {
	return qs.w(qs.db.Order("app_id ASC"))
}

// OrderAscByProviderName is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderAscByProviderName() UserConnectQuerySet {
	return qs.w(qs.db.Order("provider_name ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderAscByUserID() UserConnectQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByAppID is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderDescByAppID() UserConnectQuerySet {
	return qs.w(qs.db.Order("app_id DESC"))
}

// OrderDescByProviderName is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderDescByProviderName() UserConnectQuerySet {
	return qs.w(qs.db.Order("provider_name DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) OrderDescByUserID() UserConnectQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// ProviderNameEq is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameEq(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name = ?", providerName))
}

// ProviderNameGt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameGt(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name > ?", providerName))
}

// ProviderNameGte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameGte(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name >= ?", providerName))
}

// ProviderNameIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameIn(providerName ...string) UserConnectQuerySet {
	if len(providerName) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerName in ProviderNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_name IN (?)", providerName))
}

// ProviderNameLike is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameLike(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name LIKE ?", providerName))
}

// ProviderNameLt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameLt(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name < ?", providerName))
}

// ProviderNameLte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameLte(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name <= ?", providerName))
}

// ProviderNameNe is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameNe(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name != ?", providerName))
}

// ProviderNameNotIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameNotIn(providerName ...string) UserConnectQuerySet {
	if len(providerName) == 0 {
		qs.db.AddError(errors.New("must at least pass one providerName in ProviderNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider_name NOT IN (?)", providerName))
}

// ProviderNameNotlike is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) ProviderNameNotlike(providerName string) UserConnectQuerySet {
	return qs.w(qs.db.Where("provider_name NOT LIKE ?", providerName))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDEq(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDGt(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDGte(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDIn(userID ...int64) UserConnectQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDLt(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDLte(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDNe(userID int64) UserConnectQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserConnectQuerySet) UserIDNotIn(userID ...int64) UserConnectQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// SetAppID is an autogenerated method
// nolint: dupl
func (u UserConnectUpdater) SetAppID(appID string) UserConnectUpdater {
	u.fields[string(UserConnectDBSchema.AppID)] = appID
	return u
}

// SetProviderName is an autogenerated method
// nolint: dupl
func (u UserConnectUpdater) SetProviderName(providerName string) UserConnectUpdater {
	u.fields[string(UserConnectDBSchema.ProviderName)] = providerName
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u UserConnectUpdater) SetUserID(userID int64) UserConnectUpdater {
	u.fields[string(UserConnectDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserConnectUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserConnectUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserConnectQuerySet

// ===== BEGIN of UserConnect modifiers

// UserConnectDBSchemaField describes database schema field. It requires for method 'Update'
type UserConnectDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserConnectDBSchemaField) String() string {
	return string(f)
}

// UserConnectDBSchema stores db field names of UserConnect
var UserConnectDBSchema = struct {
	UserID       UserConnectDBSchemaField
	ProviderName UserConnectDBSchemaField
	AppID        UserConnectDBSchemaField
}{

	UserID:       UserConnectDBSchemaField("user_id"),
	ProviderName: UserConnectDBSchemaField("provider_name"),
	AppID:        UserConnectDBSchemaField("app_id"),
}

// Update updates UserConnect fields by primary key
// nolint: dupl
func (o *UserConnect) Update(db *gorm.DB, fields ...UserConnectDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"user_id":       o.UserID,
		"provider_name": o.ProviderName,
		"app_id":        o.AppID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update UserConnect %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserConnectUpdater is an UserConnect updates manager
type UserConnectUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserConnectUpdater creates new UserConnect updater
// nolint: dupl
func NewUserConnectUpdater(db *gorm.DB) UserConnectUpdater {
	return UserConnectUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&UserConnect{}),
	}
}

// ===== END of UserConnect modifiers

// ===== BEGIN of query set UserPasshashQuerySet

// UserPasshashQuerySet is an queryset type for UserPasshash
type UserPasshashQuerySet struct {
	db *gorm.DB
}

// NewUserPasshashQuerySet constructs new UserPasshashQuerySet
func NewUserPasshashQuerySet(db *gorm.DB) UserPasshashQuerySet {
	return UserPasshashQuerySet{
		db: db.Model(&UserPasshash{}),
	}
}

func (qs UserPasshashQuerySet) w(db *gorm.DB) UserPasshashQuerySet {
	return NewUserPasshashQuerySet(db)
}

func (qs UserPasshashQuerySet) Select(fields ...UserPasshashDBSchemaField) UserPasshashQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *UserPasshash) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *UserPasshash) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) All(ret *[]UserPasshash) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedEq(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created = ?", created))
}

// CreatedGt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedGt(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created > ?", created))
}

// CreatedGte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedGte(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created >= ?", created))
}

// CreatedLt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedLt(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created < ?", created))
}

// CreatedLte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedLte(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created <= ?", created))
}

// CreatedNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) CreatedNe(created time.Time) UserPasshashQuerySet {
	return qs.w(qs.db.Where("created != ?", created))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) Delete() error {
	return qs.db.Delete(UserPasshash{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(UserPasshash{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(UserPasshash{})
	return db.RowsAffected, db.Error
}

// DeprecatedEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeprecatedEq(deprecated bool) UserPasshashQuerySet {
	return qs.w(qs.db.Where("deprecated = ?", deprecated))
}

// DeprecatedIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeprecatedIn(deprecated ...bool) UserPasshashQuerySet {
	if len(deprecated) == 0 {
		qs.db.AddError(errors.New("must at least pass one deprecated in DeprecatedIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deprecated IN (?)", deprecated))
}

// DeprecatedNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeprecatedNe(deprecated bool) UserPasshashQuerySet {
	return qs.w(qs.db.Where("deprecated != ?", deprecated))
}

// DeprecatedNotIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) DeprecatedNotIn(deprecated ...bool) UserPasshashQuerySet {
	if len(deprecated) == 0 {
		qs.db.AddError(errors.New("must at least pass one deprecated in DeprecatedNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deprecated NOT IN (?)", deprecated))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) GetUpdater() UserPasshashUpdater {
	return NewUserPasshashUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDEq(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDGt(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDGte(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDIn(ID ...int64) UserPasshashQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDLt(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDLte(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDNe(ID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) IDNotIn(ID ...int64) UserPasshashQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) Limit(limit int) UserPasshashQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) Offset(offset int) UserPasshashQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserPasshashQuerySet) One(ret *UserPasshash) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreated is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByCreated() UserPasshashQuerySet {
	return qs.w(qs.db.Order("created ASC"))
}

// OrderAscByDeprecated is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByDeprecated() UserPasshashQuerySet {
	return qs.w(qs.db.Order("deprecated ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByID() UserPasshashQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByPasshash is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByPasshash() UserPasshashQuerySet {
	return qs.w(qs.db.Order("passhash ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByUserID() UserPasshashQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderAscByVer is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderAscByVer() UserPasshashQuerySet {
	return qs.w(qs.db.Order("ver ASC"))
}

// OrderDescByCreated is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByCreated() UserPasshashQuerySet {
	return qs.w(qs.db.Order("created DESC"))
}

// OrderDescByDeprecated is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByDeprecated() UserPasshashQuerySet {
	return qs.w(qs.db.Order("deprecated DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByID() UserPasshashQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByPasshash is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByPasshash() UserPasshashQuerySet {
	return qs.w(qs.db.Order("passhash DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByUserID() UserPasshashQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// OrderDescByVer is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) OrderDescByVer() UserPasshashQuerySet {
	return qs.w(qs.db.Order("ver DESC"))
}

// PasshashEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashEq(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash = ?", passhash))
}

// PasshashGt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashGt(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash > ?", passhash))
}

// PasshashGte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashGte(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash >= ?", passhash))
}

// PasshashIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashIn(passhash ...string) UserPasshashQuerySet {
	if len(passhash) == 0 {
		qs.db.AddError(errors.New("must at least pass one passhash in PasshashIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("passhash IN (?)", passhash))
}

// PasshashLike is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashLike(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash LIKE ?", passhash))
}

// PasshashLt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashLt(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash < ?", passhash))
}

// PasshashLte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashLte(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash <= ?", passhash))
}

// PasshashNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashNe(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash != ?", passhash))
}

// PasshashNotIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashNotIn(passhash ...string) UserPasshashQuerySet {
	if len(passhash) == 0 {
		qs.db.AddError(errors.New("must at least pass one passhash in PasshashNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("passhash NOT IN (?)", passhash))
}

// PasshashNotlike is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PasshashNotlike(passhash string) UserPasshashQuerySet {
	return qs.w(qs.db.Where("passhash NOT LIKE ?", passhash))
}

// PreloadUser is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) PreloadUser() UserPasshashQuerySet {
	return qs.w(qs.db.Preload("User"))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDEq(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDGt(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDGte(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDIn(userID ...int64) UserPasshashQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDLt(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDLte(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDNe(userID int64) UserPasshashQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIDNotIn(userID ...int64) UserPasshashQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// UserIsNotNull is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIsNotNull() UserPasshashQuerySet {
	return qs.w(qs.db.Where("user IS NOT NULL"))
}

// UserIsNull is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) UserIsNull() UserPasshashQuerySet {
	return qs.w(qs.db.Where("user IS NULL"))
}

// VerEq is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerEq(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver = ?", ver))
}

// VerGt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerGt(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver > ?", ver))
}

// VerGte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerGte(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver >= ?", ver))
}

// VerIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerIn(ver ...int) UserPasshashQuerySet {
	if len(ver) == 0 {
		qs.db.AddError(errors.New("must at least pass one ver in VerIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ver IN (?)", ver))
}

// VerLt is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerLt(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver < ?", ver))
}

// VerLte is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerLte(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver <= ?", ver))
}

// VerNe is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerNe(ver int) UserPasshashQuerySet {
	return qs.w(qs.db.Where("ver != ?", ver))
}

// VerNotIn is an autogenerated method
// nolint: dupl
func (qs UserPasshashQuerySet) VerNotIn(ver ...int) UserPasshashQuerySet {
	if len(ver) == 0 {
		qs.db.AddError(errors.New("must at least pass one ver in VerNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ver NOT IN (?)", ver))
}

// SetCreated is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetCreated(created time.Time) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.Created)] = created
	return u
}

// SetDeprecated is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetDeprecated(deprecated bool) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.Deprecated)] = deprecated
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetID(ID int64) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.ID)] = ID
	return u
}

// SetPasshash is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetPasshash(passhash string) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.Passhash)] = passhash
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetUserID(userID int64) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.UserID)] = userID
	return u
}

// SetVer is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) SetVer(ver int) UserPasshashUpdater {
	u.fields[string(UserPasshashDBSchema.Ver)] = ver
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserPasshashUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserPasshashQuerySet

// ===== BEGIN of UserPasshash modifiers

// UserPasshashDBSchemaField describes database schema field. It requires for method 'Update'
type UserPasshashDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserPasshashDBSchemaField) String() string {
	return string(f)
}

// UserPasshashDBSchema stores db field names of UserPasshash
var UserPasshashDBSchema = struct {
	ID         UserPasshashDBSchemaField
	UserID     UserPasshashDBSchemaField
	User       UserPasshashDBSchemaField
	Passhash   UserPasshashDBSchemaField
	Deprecated UserPasshashDBSchemaField
	Ver        UserPasshashDBSchemaField
	Created    UserPasshashDBSchemaField
}{

	ID:         UserPasshashDBSchemaField("id"),
	UserID:     UserPasshashDBSchemaField("user_id"),
	User:       UserPasshashDBSchemaField("user"),
	Passhash:   UserPasshashDBSchemaField("passhash"),
	Deprecated: UserPasshashDBSchemaField("deprecated"),
	Ver:        UserPasshashDBSchemaField("ver"),
	Created:    UserPasshashDBSchemaField("created"),
}

// Update updates UserPasshash fields by primary key
// nolint: dupl
func (o *UserPasshash) Update(db *gorm.DB, fields ...UserPasshashDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"user_id":    o.UserID,
		"user":       o.User,
		"passhash":   o.Passhash,
		"deprecated": o.Deprecated,
		"ver":        o.Ver,
		"created":    o.Created,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update UserPasshash %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserPasshashUpdater is an UserPasshash updates manager
type UserPasshashUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserPasshashUpdater creates new UserPasshash updater
// nolint: dupl
func NewUserPasshashUpdater(db *gorm.DB) UserPasshashUpdater {
	return UserPasshashUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&UserPasshash{}),
	}
}

// ===== END of UserPasshash modifiers

// ===== BEGIN of query set UserQuerySet

// UserQuerySet is an queryset type for User
type UserQuerySet struct {
	db *gorm.DB
}

// NewUserQuerySet constructs new UserQuerySet
func NewUserQuerySet(db *gorm.DB) UserQuerySet {
	return UserQuerySet{
		db: db.Model(&User{}),
	}
}

func (qs UserQuerySet) w(db *gorm.DB) UserQuerySet {
	return NewUserQuerySet(db)
}

func (qs UserQuerySet) Select(fields ...UserDBSchemaField) UserQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *User) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *User) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// ActiveEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) ActiveEq(active bool) UserQuerySet {
	return qs.w(qs.db.Where("active = ?", active))
}

// ActiveIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) ActiveIn(active ...bool) UserQuerySet {
	if len(active) == 0 {
		qs.db.AddError(errors.New("must at least pass one active in ActiveIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("active IN (?)", active))
}

// ActiveNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) ActiveNe(active bool) UserQuerySet {
	return qs.w(qs.db.Where("active != ?", active))
}

// ActiveNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) ActiveNotIn(active ...bool) UserQuerySet {
	if len(active) == 0 {
		qs.db.AddError(errors.New("must at least pass one active in ActiveNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("active NOT IN (?)", active))
}

// AddressEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressEq(address string) UserQuerySet {
	return qs.w(qs.db.Where("address = ?", address))
}

// AddressGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressGt(address string) UserQuerySet {
	return qs.w(qs.db.Where("address > ?", address))
}

// AddressGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressGte(address string) UserQuerySet {
	return qs.w(qs.db.Where("address >= ?", address))
}

// AddressIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressIn(address ...string) UserQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address IN (?)", address))
}

// AddressLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressLike(address string) UserQuerySet {
	return qs.w(qs.db.Where("address LIKE ?", address))
}

// AddressLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressLt(address string) UserQuerySet {
	return qs.w(qs.db.Where("address < ?", address))
}

// AddressLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressLte(address string) UserQuerySet {
	return qs.w(qs.db.Where("address <= ?", address))
}

// AddressNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressNe(address string) UserQuerySet {
	return qs.w(qs.db.Where("address != ?", address))
}

// AddressNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressNotIn(address ...string) UserQuerySet {
	if len(address) == 0 {
		qs.db.AddError(errors.New("must at least pass one address in AddressNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("address NOT IN (?)", address))
}

// AddressNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AddressNotlike(address string) UserQuerySet {
	return qs.w(qs.db.Where("address NOT LIKE ?", address))
}

// All is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) All(ret *[]User) error {
	return qs.db.Find(ret).Error
}

// AvatarEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarEq(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar = ?", avatar))
}

// AvatarGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarGt(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar > ?", avatar))
}

// AvatarGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarGte(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar >= ?", avatar))
}

// AvatarIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarIn(avatar ...string) UserQuerySet {
	if len(avatar) == 0 {
		qs.db.AddError(errors.New("must at least pass one avatar in AvatarIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("avatar IN (?)", avatar))
}

// AvatarLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarLike(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar LIKE ?", avatar))
}

// AvatarLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarLt(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar < ?", avatar))
}

// AvatarLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarLte(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar <= ?", avatar))
}

// AvatarNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarNe(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar != ?", avatar))
}

// AvatarNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarNotIn(avatar ...string) UserQuerySet {
	if len(avatar) == 0 {
		qs.db.AddError(errors.New("must at least pass one avatar in AvatarNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("avatar NOT IN (?)", avatar))
}

// AvatarNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) AvatarNotlike(avatar string) UserQuerySet {
	return qs.w(qs.db.Where("avatar NOT LIKE ?", avatar))
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Delete() error {
	return qs.db.Delete(User{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(User{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(User{})
	return db.RowsAffected, db.Error
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailEq(email string) UserQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailGt(email string) UserQuerySet {
	return qs.w(qs.db.Where("email > ?", email))
}

// EmailGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailGte(email string) UserQuerySet {
	return qs.w(qs.db.Where("email >= ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailIn(email ...string) UserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email IN (?)", email))
}

// EmailLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLike(email string) UserQuerySet {
	return qs.w(qs.db.Where("email LIKE ?", email))
}

// EmailLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLt(email string) UserQuerySet {
	return qs.w(qs.db.Where("email < ?", email))
}

// EmailLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailLte(email string) UserQuerySet {
	return qs.w(qs.db.Where("email <= ?", email))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNe(email string) UserQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNotIn(email ...string) UserQuerySet {
	if len(email) == 0 {
		qs.db.AddError(errors.New("must at least pass one email in EmailNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", email))
}

// EmailNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNotlike(email string) UserQuerySet {
	return qs.w(qs.db.Where("email NOT LIKE ?", email))
}

// FullNameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameEq(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name = ?", fullName))
}

// FullNameGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameGt(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name > ?", fullName))
}

// FullNameGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameGte(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name >= ?", fullName))
}

// FullNameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameIn(fullName ...string) UserQuerySet {
	if len(fullName) == 0 {
		qs.db.AddError(errors.New("must at least pass one fullName in FullNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("full_name IN (?)", fullName))
}

// FullNameLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameLike(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name LIKE ?", fullName))
}

// FullNameLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameLt(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name < ?", fullName))
}

// FullNameLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameLte(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name <= ?", fullName))
}

// FullNameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameNe(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name != ?", fullName))
}

// FullNameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameNotIn(fullName ...string) UserQuerySet {
	if len(fullName) == 0 {
		qs.db.AddError(errors.New("must at least pass one fullName in FullNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("full_name NOT IN (?)", fullName))
}

// FullNameNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) FullNameNotlike(fullName string) UserQuerySet {
	return qs.w(qs.db.Where("full_name NOT LIKE ?", fullName))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetUpdater() UserUpdater {
	return NewUserUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDEq(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGt(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGte(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDIn(ID ...int64) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLt(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLte(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNe(ID int64) UserQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNotIn(ID ...int64) UserQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// LastLoginEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginEq(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login = ?", lastLogin))
}

// LastLoginGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginGt(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login > ?", lastLogin))
}

// LastLoginGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginGte(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login >= ?", lastLogin))
}

// LastLoginIsNotNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginIsNotNull() UserQuerySet {
	return qs.w(qs.db.Where("last_login IS NOT NULL"))
}

// LastLoginIsNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginIsNull() UserQuerySet {
	return qs.w(qs.db.Where("last_login IS NULL"))
}

// LastLoginLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginLt(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login < ?", lastLogin))
}

// LastLoginLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginLte(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login <= ?", lastLogin))
}

// LastLoginNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastLoginNe(lastLogin time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_login != ?", lastLogin))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Limit(limit int) UserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Offset(offset int) UserQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserQuerySet) One(ret *User) error {
	return qs.db.First(ret).Error
}

// OrderAscByActive is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByActive() UserQuerySet {
	return qs.w(qs.db.Order("active ASC"))
}

// OrderAscByAddress is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByAddress() UserQuerySet {
	return qs.w(qs.db.Order("address ASC"))
}

// OrderAscByAvatar is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByAvatar() UserQuerySet {
	return qs.w(qs.db.Order("avatar ASC"))
}

// OrderAscByEmail is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEmail() UserQuerySet {
	return qs.w(qs.db.Order("email ASC"))
}

// OrderAscByFullName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByFullName() UserQuerySet {
	return qs.w(qs.db.Order("full_name ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByID() UserQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByLastLogin is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByLastLogin() UserQuerySet {
	return qs.w(qs.db.Order("last_login ASC"))
}

// OrderAscByPhoneNum is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByPhoneNum() UserQuerySet {
	return qs.w(qs.db.Order("phone_num ASC"))
}

// OrderAscByRegisteredAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRegisteredAt() UserQuerySet {
	return qs.w(qs.db.Order("registered_at ASC"))
}

// OrderAscByType is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByType() UserQuerySet {
	return qs.w(qs.db.Order("type ASC"))
}

// OrderDescByActive is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByActive() UserQuerySet {
	return qs.w(qs.db.Order("active DESC"))
}

// OrderDescByAddress is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByAddress() UserQuerySet {
	return qs.w(qs.db.Order("address DESC"))
}

// OrderDescByAvatar is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByAvatar() UserQuerySet {
	return qs.w(qs.db.Order("avatar DESC"))
}

// OrderDescByEmail is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEmail() UserQuerySet {
	return qs.w(qs.db.Order("email DESC"))
}

// OrderDescByFullName is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByFullName() UserQuerySet {
	return qs.w(qs.db.Order("full_name DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByID() UserQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByLastLogin is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByLastLogin() UserQuerySet {
	return qs.w(qs.db.Order("last_login DESC"))
}

// OrderDescByPhoneNum is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByPhoneNum() UserQuerySet {
	return qs.w(qs.db.Order("phone_num DESC"))
}

// OrderDescByRegisteredAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRegisteredAt() UserQuerySet {
	return qs.w(qs.db.Order("registered_at DESC"))
}

// OrderDescByType is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByType() UserQuerySet {
	return qs.w(qs.db.Order("type DESC"))
}

// PhoneNumEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumEq(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num = ?", phoneNum))
}

// PhoneNumGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumGt(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num > ?", phoneNum))
}

// PhoneNumGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumGte(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num >= ?", phoneNum))
}

// PhoneNumIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumIn(phoneNum ...string) UserQuerySet {
	if len(phoneNum) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNum in PhoneNumIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("phone_num IN (?)", phoneNum))
}

// PhoneNumLike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumLike(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num LIKE ?", phoneNum))
}

// PhoneNumLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumLt(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num < ?", phoneNum))
}

// PhoneNumLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumLte(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num <= ?", phoneNum))
}

// PhoneNumNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumNe(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num != ?", phoneNum))
}

// PhoneNumNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumNotIn(phoneNum ...string) UserQuerySet {
	if len(phoneNum) == 0 {
		qs.db.AddError(errors.New("must at least pass one phoneNum in PhoneNumNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("phone_num NOT IN (?)", phoneNum))
}

// PhoneNumNotlike is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PhoneNumNotlike(phoneNum string) UserQuerySet {
	return qs.w(qs.db.Where("phone_num NOT LIKE ?", phoneNum))
}

// RegisteredAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtEq(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at = ?", registeredAt))
}

// RegisteredAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtGt(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at > ?", registeredAt))
}

// RegisteredAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtGte(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at >= ?", registeredAt))
}

// RegisteredAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtLt(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at < ?", registeredAt))
}

// RegisteredAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtLte(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at <= ?", registeredAt))
}

// RegisteredAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RegisteredAtNe(registeredAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("registered_at != ?", registeredAt))
}

// TypeEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeEq(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type = ?", typeValue))
}

// TypeGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeGt(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type > ?", typeValue))
}

// TypeGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeGte(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type >= ?", typeValue))
}

// TypeIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeIn(typeValue ...int) UserQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("type IN (?)", typeValue))
}

// TypeLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeLt(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type < ?", typeValue))
}

// TypeLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeLte(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type <= ?", typeValue))
}

// TypeNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeNe(typeValue int) UserQuerySet {
	return qs.w(qs.db.Where("type != ?", typeValue))
}

// TypeNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) TypeNotIn(typeValue ...int) UserQuerySet {
	if len(typeValue) == 0 {
		qs.db.AddError(errors.New("must at least pass one typeValue in TypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("type NOT IN (?)", typeValue))
}

// SetActive is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetActive(active bool) UserUpdater {
	u.fields[string(UserDBSchema.Active)] = active
	return u
}

// SetAddress is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetAddress(address string) UserUpdater {
	u.fields[string(UserDBSchema.Address)] = address
	return u
}

// SetAvatar is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetAvatar(avatar string) UserUpdater {
	u.fields[string(UserDBSchema.Avatar)] = avatar
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEmail(email string) UserUpdater {
	u.fields[string(UserDBSchema.Email)] = email
	return u
}

// SetFullName is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetFullName(fullName string) UserUpdater {
	u.fields[string(UserDBSchema.FullName)] = fullName
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetID(ID int64) UserUpdater {
	u.fields[string(UserDBSchema.ID)] = ID
	return u
}

// SetLastLogin is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetLastLogin(lastLogin *time.Time) UserUpdater {
	u.fields[string(UserDBSchema.LastLogin)] = lastLogin
	return u
}

// SetPhoneNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPhoneNum(phoneNum string) UserUpdater {
	u.fields[string(UserDBSchema.PhoneNum)] = phoneNum
	return u
}

// SetRegisteredAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRegisteredAt(registeredAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.RegisteredAt)] = registeredAt
	return u
}

// SetType is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetType(typeValue int) UserUpdater {
	u.fields[string(UserDBSchema.Type)] = typeValue
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set UserQuerySet

// ===== BEGIN of User modifiers

// UserDBSchemaField describes database schema field. It requires for method 'Update'
type UserDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f UserDBSchemaField) String() string {
	return string(f)
}

// UserDBSchema stores db field names of User
var UserDBSchema = struct {
	ID           UserDBSchemaField
	FullName     UserDBSchemaField
	Email        UserDBSchemaField
	PhoneNum     UserDBSchemaField
	Address      UserDBSchemaField
	Avatar       UserDBSchemaField
	Type         UserDBSchemaField
	Active       UserDBSchemaField
	LastLogin    UserDBSchemaField
	RegisteredAt UserDBSchemaField
}{

	ID:           UserDBSchemaField("id"),
	FullName:     UserDBSchemaField("full_name"),
	Email:        UserDBSchemaField("email"),
	PhoneNum:     UserDBSchemaField("phone_num"),
	Address:      UserDBSchemaField("address"),
	Avatar:       UserDBSchemaField("avatar"),
	Type:         UserDBSchemaField("type"),
	Active:       UserDBSchemaField("active"),
	LastLogin:    UserDBSchemaField("last_login"),
	RegisteredAt: UserDBSchemaField("registered_at"),
}

// Update updates User fields by primary key
// nolint: dupl
func (o *User) Update(db *gorm.DB, fields ...UserDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":            o.ID,
		"full_name":     o.FullName,
		"email":         o.Email,
		"phone_num":     o.PhoneNum,
		"address":       o.Address,
		"avatar":        o.Avatar,
		"type":          o.Type,
		"active":        o.Active,
		"last_login":    o.LastLogin,
		"registered_at": o.RegisteredAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update User %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserUpdater is an User updates manager
type UserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserUpdater creates new User updater
// nolint: dupl
func NewUserUpdater(db *gorm.DB) UserUpdater {
	return UserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&User{}),
	}
}

// ===== END of User modifiers

// ===== END of all query sets
