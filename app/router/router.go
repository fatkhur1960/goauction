// Code generated by router_generator. DO NOT EDIT.
package router

import (
	mid "github.com/fatkhur1960/goauction/app/middleware"
	repo "github.com/fatkhur1960/goauction/app/repository"
	"github.com/fatkhur1960/goauction/app/service"
	"log"

	// import swagger doc
	_ "github.com/fatkhur1960/goauction/docs"
	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// GetGeneratedRoutes list route pada app
func GetGeneratedRoutes(router *gin.Engine) *gin.Engine {
	apiGroup := router.Group("/api")
	{
		// Do not edit this code by your hand
		// this code generate automatically when program running
		// @StartCodeBlocks

		// Generate route for AuthService
		authService := service.NewAuthService()
		authServiceGroup := apiGroup.Group("/auth/v1")
		{
			authServiceGroup.POST("/authorize", authService.AuthorizeUser)
			authServiceGroup.POST("/unauthorize", mid.RequiresUserAuth, authService.UnauthorizeUser)
		}

		// Generate route for ChatService
		chatService := service.NewChatService()
		chatServiceGroup := apiGroup.Group("/chat/v1")
		{
			chatServiceGroup.POST("/new-room", mid.RequiresUserAuth, func(c *gin.Context) {
	mid.RequestValidator(c, &service.CreateChatQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*service.CreateChatQuery)
if !ok {
 log.Println("validated not set")
}
	chatService.CreateChatRoom(c, query)
})
		}

		// Generate route for ProductService
		productService := service.NewProductService()
		productServiceGroup := apiGroup.Group("/product/v1")
		{
			productServiceGroup.POST("/add", mid.RequiresUserAuth, func(c *gin.Context) {
	mid.RequestValidator(c, &repo.NewProductQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*repo.NewProductQuery)
if !ok {
 log.Println("validated not set")
}
	productService.AddProduct(c, query)
})
			productServiceGroup.GET("/list", mid.RequiresUserAuth, productService.ListProduct)
			productServiceGroup.GET("/me/list", mid.RequiresUserAuth, productService.ListMyProduct)
			productServiceGroup.GET("/detail/:id", mid.RequiresUserAuth, productService.DetailProduct)
			productServiceGroup.POST("/update", mid.RequiresUserAuth, func(c *gin.Context) {
	mid.RequestValidator(c, &repo.UpdateProductQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*repo.UpdateProductQuery)
if !ok {
 log.Println("validated not set")
}
	productService.UpdateProduct(c, query)
})
			productServiceGroup.POST("/delete/:id", mid.RequiresUserAuth, productService.DeleteProduct)
			productServiceGroup.POST("/bid", mid.RequiresUserAuth, func(c *gin.Context) {
	mid.RequestValidator(c, &service.BidProductQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*service.BidProductQuery)
if !ok {
 log.Println("validated not set")
}
	productService.BidProduct(c, query)
})
			productServiceGroup.POST("/reopen", mid.RequiresUserAuth, func(c *gin.Context) {
	mid.RequestValidator(c, &service.ReOpenBidQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*service.ReOpenBidQuery)
if !ok {
 log.Println("validated not set")
}
	productService.ReOpenProductBid(c, query)
})
			productServiceGroup.POST("/mark-as-sold/:id", mid.RequiresUserAuth, productService.MarkProductAsSold)
		}

		// Generate route for UserService
		userService := service.NewUserService()
		userServiceGroup := apiGroup.Group("/user/v1")
		{
			userServiceGroup.POST("/register", func(c *gin.Context) {
	mid.RequestValidator(c, &service.RegisterUserQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*service.RegisterUserQuery)
if !ok {
 log.Println("validated not set")
}
	userService.RegisterUser(c, query)
})
			userServiceGroup.POST("/activate", func(c *gin.Context) {
	mid.RequestValidator(c, &service.ActivateUserQuery{})
	}, func(c *gin.Context) {
	query, ok := c.MustGet("validated").(*service.ActivateUserQuery)
if !ok {
 log.Println("validated not set")
}
	userService.ActivateUser(c, query)
})
			userServiceGroup.GET("/me/info", mid.RequiresUserAuth, userService.MeInfo)
			userServiceGroup.POST("/me/info", mid.RequiresUserAuth, userService.UpdateUserInfo)
			userServiceGroup.GET("/bids", mid.RequiresUserAuth, userService.ListUserBids)
			userServiceGroup.GET("/notifs", mid.RequiresUserAuth, userService.ListUserNotifs)
			userServiceGroup.POST("/notifs/read", mid.RequiresUserAuth, userService.MarkAsReadNotif)
		}

		// @EndCodeBlocks
	}

	router.GET("/docs/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.NoRoute(service.NoRouteHandler)
	router.Use(gin.Recovery())

	return router
}
